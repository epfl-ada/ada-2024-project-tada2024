mathemat , comput , linguist , relat disciplin , algorithm finit list well-defin instruct accomplish task , given initi state , termin defin end-stat . concept algorithm origin mean record procedur solv mathemat problem find common divisor two number multipli two number . concept formal 1936 alan ture 's ture machin alonzo church 's lambda calculu , turn form foundat comput scienc . # # etymolog al-khwārizmī , persian astronom mathematician , wrote treatis arab 825 ad , calcul hindu numer , translat latin 12th centuri algoritmi de numero indorum , titl like intend mean `` algoritmi number indian '' , `` algoritmi '' translat 's rendit author 's name ; peopl misunderstand titl treat algoritmi latin plural led word `` algorithm '' ( latin algorithmu ) come mean `` calcul method '' . intrus `` h '' like due fals cognat greek αριθμος arithmo = `` number '' . # # algorithm necessari : inform definit detail present variou point view around definit `` algorithm '' see algorithm character . exampl simpl addit algorithm specifi detail manner describ algorithm character , see algorithm exampl . gener accept formal definit `` algorithm '' exist . , howev , deriv clue issu involv inform mean word follow quotat boolo jeffrey ( 1974 , 1999 ) : '' human write fast enough , long enough , small enough list member enumer infinit set write name , one anoth , notat . human someth equal use , case certain enumer infinit set : give explicit instruct determin nth member set , arbitrari finit n. instruct given quit explicitli , form could follow comput machin , human capabl carri elementari oper symbol `` ( boldfac ad , p. 19 ) . word `` enumer infinit '' mean `` countabl use integ perhap extend infin '' . thu boolo jeffrey say algorithm impli instruct process `` creat '' output integ arbitrari `` input '' integ integ , theori , chosen 0 infin . thu might expect algorithm algebra equat = + n — two arbitrari `` input variabl '' n produc output . unfortun — see algorithm character — word algorithm impli much , someth order ( addit exampl ) : precis instruct ( languag understood `` comput '' ) `` fast , effici , good '' process specifi `` move '' `` comput '' ( machin human , equip necessari internally-contain inform capabl ) find , decod , munch arbitrari input integers/symbol n , symbol + = ... ( reliabl , correctli , `` effect '' ) produc , `` reason '' time , output-integ specifi place specifi format . # # formal algorithm algorithm essenti way comput process inform , comput program essenti algorithm tell comput specif step perform ( specif order ) order carri specifi task , calcul employe ’ paycheck print student ’ report card . thu , algorithm consid sequenc oper perform turing-complet system . author assert thesi includ savag ( 1987 ) gurevich ( 2000 ) : '' ... ture 's inform argument favour thesi justifi stronger thesi : everi algorithm simul ture machin '' ( gurevich 2000 p.1 ) ... accord savag [ 1987 ] , `` algorithm comput process defin ture machin . `` ( gurevich 2000 p.3 ) typic , algorithm associ process inform , data read input sourc devic , written output sink devic , and/or store process . store data regard part intern state entiti perform algorithm . practic , state store data structur , algorithm requir intern data specif oper set call abstract data type . comput process , algorithm must rigor defin : specifi way appli possibl circumst could aris . , condit step must systemat dealt , case-by-cas ; criterion case must clear ( comput ) . algorithm precis list precis step , order comput almost alway critic function algorithm . instruct usual assum list explicitli , describ start 'from top ' go 'down bottom ' , idea describ formal flow control . far , discuss formal algorithm assum premis imper program . common concept , attempt describ task discret , 'mechan ' mean . uniqu concept formal algorithm assign oper , set valu variabl . deriv intuit ' memori ' scratchpad . exampl assign . altern concept constitut algorithm see function program logic program . # # # termin writer restrict definit algorithm procedur eventu finish . categori kleen 1952 place `` decis procedur decis method algorithm question '' ( kleen p. 136 ) . other , includ kleen , includ procedur could run forev without stop ; procedur call `` comput method '' ( knuth , vol.1 p. 5 ) `` calcul procedur algorithm `` ( kleen p. 137 ) ; howev , kleen note method must eventu exhibit `` object '' ( kleen p. 137 ) . minksi make pertin observ algorithm n't termin answer question `` termin correct answer ? `` : '' length process known advanc , 'tri ' may decis , process go forev — time ever sure answer '' ( minski ( 1967 ) p. 105 ) thu answer : undecid . never know , analysi beforehand find . analysi algorithm likelihood termin call termin analysi . see halt problem knotti issu . case non-halt comput method ( calcul procedur ) success longer defin term halt meaning output . instead , term success allow unbound output sequenc must defin . exampl , algorithm verifi zero one infinit random binari sequenc must run forev effect . implement correctli , howev , algorithm 's output use : long examin sequenc , algorithm give posit respons number examin zero outnumb one , neg respons otherwis . success algorithm could defin eventu output posit respons actual zero one sequenc , case output mixtur posit neg respons . see exampl ( im- ) '' proper '' subtract partial function happen algorithm fail certain input number — e.g . ( ) non-termin , ( ii ) product `` junk '' ( output wrong format consid number ) number ( ) ( halt end comput output ) , ( iii ) wrong number ( ) , ( iv ) combin . kleen ( 1952 ) p. 322–323 propos product `` junk '' failur produc number solv algorithm detect instanc produc e.g . error messag ( suggest `` 0 '' ) , prefer , forc algorithm endless loop . ( davi ( 1958 ) subtract algorithm ( p. 12–15 ) — fix algorithm second exampl proper subtract ) . along logic outcom `` true '' `` fals '' kleen also propos use third logic symbol `` u '' — undecid ( p. 326 ) — thu algorithm alway produc someth confront `` proposit '' . problem wrong answer must solv independ `` proof '' algorithm e.g . use induct : '' normal requir auxiliari evid ( algorithm correctli defin mu recurs function ) , e.g . form induct proof , argument valu , comput termin uniqu valu '' ( minski ( 1967 ) p. 186 ) # # # express algorithm algorithm express mani kind notat , includ natur languag , pseudocod , flowchart , program languag . natur languag express algorithm tend verbos ambigu , rare use complex technic algorithm . pseudocod flowchart structur way express algorithm avoid mani ambigu common natur languag statement , remain independ particular implement languag . program languag primarili intend express algorithm form execut comput , often use way defin document algorithm . exampl , boolos-burgess-jeffrey ( 2002 ) ( p. 26 ) give exampl ture machin program written `` machin tabl '' ( see ture machin , finit state machin , state transit tabl ) , `` flow chart '' ( see state diagram ) , form rudimentari machin code assembl code call `` set quadrupl '' ( see ture machin ) . give detail outlin `` multipl machin '' ( cf figur 3.7 p. 30 ) drawn `` flow chart '' , portion label short natural-languag descript . describ comput `` abacu machin '' model ( see regist machin ) boolos-burgess-jeffrey ( 2002 ) supplement small `` flow chart '' ( state diagram ) natural-languag and/or arithmet express written insid `` block diagram '' summar `` flow chart '' accomplish . sometim combin `` block diagram '' `` flow chart '' descript . chapter 3.3 titl definit algorithm sipser ( 2006 ) describ three level ture machin descript ( quot p. 157 ) : 1 high-level descript : '' ... prose describ algorithm , ignor implement detail . level need mention machin manag tape head '' 2 implement descript : '' ... prose use defin way ture machin us head way store data tape . level give detail state transit function '' 3 formal descript : detail , `` lowest level '' , give ture machin 's `` state tabl '' . # # # implement algorithm intend implement comput program . howev , algorithm also implement mean , biolog neural network ( exampl , human brain implement arithmet insect look food ) , electr circuit , mechan devic . # # exampl one simplest algorithm find largest number ( unsort ) list number . solut necessarili requir look everi number list , . follow simpl algorithm , state high-level descript english prose , : high-level descript : assum first item largest . look remain item list larger largest item far , make note . last note item largest list process complet . ( quasi- ) formal descript : written prose much closer high-level languag comput program , follow formal code algorithm pseudocod pidgin code : algorithm largestnumb input : non-empti list number l. output : largest number list l. largest ← l0 item list l≥1 , item > largest , largest ← item return largest '' ← '' loos shorthand `` chang '' . instanc , `` largest ← item `` mean valu largest chang valu item . '' return `` termin algorithm output valu follow . complex exampl algorithm , see euclid 's algorithm greatest common divisor , one earliest algorithm known . detail exampl simpl algorithm `` add m+n '' , precis defin ture machin `` counter machin '' manner three description-level sipser ( 2006 ) precis input-output specif boolos-burgess-jeffrey ( 2002 ) see algorithm exampl . # # # algorithm analysi happen , import know much particular resourc ( time storag ) requir given algorithm . method develop analysi algorithm obtain quantit answer ; exampl , algorithm time requir ( n ) , use big notat n length list . time algorithm need rememb two valu : largest number found far , current posit input list . therefor said space requir ( 1 ) . ( note size input count space use algorithm . ) differ algorithm may complet task differ set instruct less time , space , effort other . exampl , given two differ recip make potato salad , one may peel potato boil potato present step revers order , yet call step repeat potato end potato salad readi eaten . analysi studi algorithm disciplin comput scienc , often practic abstractli ( without use specif program languag implement ) . sens , resembl mathemat disciplin analysi focu underli principl algorithm , particular implement . pseudocod simplest abstract enough analysi . # # class variou way classifi algorithm , merit . # # # classif implement one way classifi algorithm implement mean . recurs iter : recurs algorithm one invok ( make refer ) repeatedli certain condit match , method common function program . iter algorithm use repetit construct like loop sometim addit data structur like stack solv given problem . problem natur suit one implement . exampl , tower hanoi well understood recurs implement . everi recurs version equival ( possibl less complex ) iter version , vice versa . logic : algorithm may view control logic deduct . notion may express : algorithm = logic + control . logic compon express axiom may use comput control compon determin way deduct appli axiom . basi logic program paradigm . pure logic program languag control compon fix algorithm specifi suppli logic compon . appeal approach eleg semant : chang axiom well defin chang algorithm . serial parallel distribut : algorithm usual discuss assumpt comput execut one instruct algorithm time . comput sometim call serial comput . algorithm design environ call serial algorithm , oppos parallel algorithm distribut algorithm . parallel algorithm take advantag comput architectur sever processor work problem time , wherea distribut algorithm utilis multipl machin connect network . parallel distribut algorithm divid problem symmetr asymmetr subproblem collect result back togeth . resourc consumpt algorithm processor cycl processor also commun overhead processor . sort algorithm parallel effici , commun overhead expens . iter algorithm gener paralleliz . problem parallel algorithm , call inher serial problem . determinist non-determinist : determinist algorithm solv problem exact decis everi step algorithm wherea non-determinist algorithm solv problem via guess although typic guess made accur use heurist . exact approxim : mani algorithm reach exact solut , approxim algorithm seek approxim close true solut . approxim may use either determinist random strategi . algorithm practic valu mani hard problem . # # # classif design paradigm anoth way classifi algorithm design methodolog paradigm . certain number paradigm , differ . furthermor , categori includ mani differ type algorithm . commonli found paradigm includ : divid conquer . divid conquer algorithm repeatedli reduc instanc problem one smaller instanc problem ( usual recurs ) , instanc small enough solv easili . one exampl divid conquer merg sort . sort done segment data divid data segment sort entir data obtain conquer phase merg . simpler variant divid conquer call decreas conquer algorithm , solv ident subproblem us solut subproblem solv bigger problem . divid conquer divid problem multipl subproblem conquer stage complex decreas conquer algorithm . exampl decreas conquer algorithm binari search algorithm . dynam program . problem show optim substructur , mean optim solut problem construct optim solut subproblem , overlap subproblem , mean subproblem use solv mani differ problem instanc , quicker approach call dynam program avoid recomput solut alreadi comput . exampl , shortest path goal vertex weight graph found use shortest path goal adjac vertex . dynam program memoiz go togeth . main differ dynam program divid conquer , subproblem less independ divid conquer , overlap subproblem occur dynam program . differ dynam program straightforward recurs cach memoiz recurs call . subproblem independ repetit , memoiz help ; henc dynam program solut complex problem . use memoiz maintain tabl subproblem alreadi solv , dynam program reduc exponenti natur mani problem polynomi complex . greedi method . greedi algorithm similar dynam program algorithm , differ solut subproblem known stage ; instead `` greedi '' choic made look best moment . differ dynam program greedi method , extend solut best possibl decis ( feasibl decis ) algorithm stage base current local optimum best decis ( possibl decis ) made previou stage . exhaust , give accur answer mani problem . work , fastest method . popular greedi algorithm find minim span tree given kruskal . linear program . solv problem use linear program , program put number linear inequ attempt made maxim ( minim ) input . mani problem ( maximum flow direct graph ) state linear program way , solv 'gener ' algorithm simplex algorithm . complex variant linear program call integ program , solut space restrict integ . reduct . anoth power techniqu solv mani problem transform one problem anoth problem . exampl , one select algorithm find median unsort list first translat problem sort problem find middl element sort list . goal reduct algorithm find simplest transform complex reduct algorithm domin complex reduc algorithm . techniqu also call transform conquer . search enumer . mani problem ( play chess ) model problem graph . graph explor algorithm specifi rule move around graph use problem . categori also includ search algorithm , branch bound enumer backtrack . probabilist heurist paradigm . algorithm belong class fit definit algorithm loos . probabilist algorithm make choic randomli ( pseudo-randomli ) ; problem , fact proven fastest solut must involv random . genet algorithm attempt find solut problem mimick biolog evolutionari process , cycl random mutat yield success gener `` solut '' . thu , emul reproduct `` surviv fittest '' . genet program , approach extend algorithm , regard algorithm `` solut '' problem . also heurist algorithm , whose gener purpos find optim solut , approxim solut time resourc limit . practic find perfect solut . exampl would local search , taboo search , simul anneal algorithm , class heurist probabilist algorithm vari solut problem random amount . name `` simul anneal '' allud metallurg term mean heat cool metal achiev freedom defect . purpos random varianc find close global optim solut rather simpli local optim one , idea random element decreas algorithm settl solut . # # # classif field studi everi field scienc problem need effici algorithm . relat problem one field often studi togeth . exampl class search algorithm , sort algorithm , merg algorithm , numer algorithm , graph algorithm , string algorithm , comput geometr algorithm , combinatori algorithm , machin learn , cryptographi , data compress algorithm pars techniqu . field tend overlap , algorithm advanc one field may improv , sometim complet unrel , field . exampl , dynam program origin invent optimis resourc consumpt industri , use solv broad rang problem mani field . # # # classif complex actual problem classif strict sens . algorithm complet linear time proport input size , exponenti amount time , never . problem may multipl algorithm , problem may algorithm , problem known effici algorithm . also map problem problem . comput scientist found suitabl classifi problem rather algorithm equival class base complex . # # legal issu countri allow algorithm patent embodi softwar hardwar . patent long controversi issu ( see , exampl , softwar patent debat ) . countri allow certain algorithm , cryptograph algorithm , export countri ( see export cryptographi ) . # # histori : develop notion `` algorithm '' # # # origin word word algorithm come name 9th centuri persian mathematician abu abdullah muhammad ibn musa al-khwarizmi whose work introduc indian numer algebra concept . work baghdad time centr scientif studi trade . word algor origin refer rule perform arithmet use arab numer evolv via european latin translat al-khwarizmi 's name algorithm 18th centuri . word evolv includ definit procedur solv problem perform task . # # # discret distinguish symbol tally-mark : keep track flock , sack grain money ancient use talli — accumul stone , mark — discret symbol clay scratch stick . babylonian egyptian use mark symbol eventu roman numer abacu evolv . ( dilson , p.16–41 ) talli mark appear promin unari numer system arithmet use ture machin post-tur machin comput . # # # manipul symbol `` place holder '' number : algebra work ancient greek geomet , persian mathematician al-khwarizmi — often consid `` father algebra `` , chines western european mathematican culmin leibniz ' notion calculu ratiocin ( ca 1680 ) : '' good centuri half ahead time , leibniz propos algebra logic , algebra would specifi rule manipul logic concept manner ordinari algebra specifi rule manipul number '' ( davi ( 2000 ) p. 18 ) . # # # mechan contriv discret state clock : bolter credit invent weight-driven clock “ key invent [ europ middl age ] '' , particular verg escap ( bolter p. 24 ) provid u tick tock mechan clock . “ accur automat machin ” ( bolter p. 26 quot mumford ) led immedi `` mechan automaton '' begin thirteenth centuri final “ comput machin '' – differ engin analyt engin charl babbag countess ada lovelac ( bolter p.33–34 , p.204–206 ) . jacquard loom , hollerith punch card , telegraphi telephoni — electromechan relay : bell newel ( 1971 ) indic jacquard loom ( 1801 ) , precursor hollerith card ( punch card , 1887 ) , “ telephon switch technolog ” root tree lead develop first comput ( bell newel diagram p. 39 , cf davi ( 2000 ) ) . mid-1800 telegraph , precursor telephon , use throughout world , discret distinguish encod letter “ dot dash ” common sound . late 1800 ticker tape ( ca 1870 ) use , use hollerith card 1890 u.s. censu , teletyp ( ca 1910 ) use punched-pap binari encod baudot code tape . telephone-switch network electromechan relay ( invent 1835 ) behind work georg stibitz ( 1937 ) , inventor digit ad devic . work bell laboratori , observ “ burdensom ’ use mechan calcul gear . `` went home one even 1937 intend test idea .... tinker , stibitz construct binari ad devic '' ( valley new , p. 13 ) . davi ( 2000 ) observ particular import electromechan relay ( two `` binari state '' open close ) : develop , begin 1930 , electromechan calcul use electr relay , machin built scope babbag envis . '' ( davi , p. 148 ) # # # mathemat 1800 mid-1900 symbol rule : rapid success mathemat georg bool ( 1847 , 1854 ) , gottlob frege ( 1879 ) , giusepp peano ( 1888–1889 ) reduc arithmet sequenc symbol manipul rule . peano 's principl arithmet , present new method ( 1888 ) `` first attempt axiomat mathemat symbol languag '' ( heijenoort , p. 81ff ) . heijenoort give frege ( 1879 ) kudo : frege ’ `` perhap import singl work ever written logic . ... see `` 'formula languag ' , lingua characterica , languag written special symbol , `` pure thought '' , , free rhetor embellish ... construct specif symbol manipul accord definit rule '' ( p. 1 ) . work frege simplifi amplifi alfr north whitehead bertrand russel principia mathematica ( 1910–1913 ) . paradox : time number disturb paradox appear literatur , particular burali-forti paradox ( 1897 ) , russel paradox ( 1902–03 ) , richard paradox ( 1905 , dixon 1906 ) , ( cf kleen ( 1952 ) p. 36–40 ) . result consider led kurt gödel ’ paper ( 1931 ) — specif cite paradox liar — complet reduc rule recurs number . rapid success follow appear : church-kleen 's λ-calculu ( cf footnot alonzo church 's paper , undecid p. 90 ) , church 's ( 1936 ) theorem ( undecid , p. 88ff ) , emil post 's ( 1936 ) `` process '' ( undecid , p. 289–290 ) , alan ture 's ( 1936–1937 ) `` a- [ automatic- ] machin '' ( undecid , p. 116ff ) , j. barkley rosser 's ( 1939 ) definit `` effect method '' term `` machin '' ( undecid , p. 226 ) , s. c. kleen 's ( 1943 ) propos `` church-tur thesi '' ( undecid , p. 273–274 ) # # # emil post ( 1936 ) alan ture ( 1936 , 1937 ) remark coincid two men know describ process men-as-comput work comput — yield virtual ident definit . emil post ( 1936 ) describ action `` comput '' ( human ) follow : '' ... two concept involv : symbol space work lead problem answer carri , fix unalter set direct . symbol space would '' two way infinit sequenc space box ... problem solver worker move work symbol space , capabl , oper one box time .... box admit two possibl condit , i.e . empti unmark , singl mark , say vertic stroke . `` one box singl call start point . ... specif problem given symbol form finit number box [ i.e . input ] mark stroke . likewis answer [ i.e . output ] given symbol form configur mark box .... '' set direct applic gener problem set determinist process appli specif problem . process termin come direct type ( c ) [ i.e . stop ] . '' ( u p. 289–290 ) see post-tur machin alan ture ’ work ( 1936–1937 ) preced stibitz ( 1937 ) ; unknown stibitz knew work ture . ture ’ biograph believ ture ’ use typewriter-lik model deriv youth interest : “ alan dreamt invent typewrit boy ; mrs. ture typewrit ; could well begun ask meant call typewrit 'mechan ' '' ( hodg , p. 96 ) given preval mors code telegraphi , ticker tape machin , teletyp might conjectur influenc . ture — model comput call ture machin — begin , post , analysi human comput whittl simpl set basic motion `` state mind '' . continu step creat machin model comput number ( undecid p. 116 ) : '' comput normal done write certain symbol paper . may suppos paper divid squar like child 's arithmet book .... assum comput carri one-dimension paper , i.e . tape divid squar . shall also suppos number symbol may print finit .... '' behaviour comput moment determin symbol observ , `` state mind '' moment . may suppos bound b number symbol squar comput observ one moment . wish observ , must use success observ . also suppos number state mind need taken account finit ... '' let u imagin oper perform comput split 'simpl oper ' elementari easi imagin divid '' ( undecid p. 136 ) . ture 's reduct yield follow : '' simpl oper must therefor includ : '' ( ) chang symbol one observ squar '' ( b ) chang one squar observ anoth squar within l squar one previous observ squar . `` may chang necessarili invok chang state mind . gener singl oper must therefor taken one follow : '' ( ) possibl chang ( ) symbol togeth possibl chang state mind . `` ( b ) possibl chang ( b ) observ squar , togeth possibl chang state mind '' '' may construct machin work comput . `` ( undecid p. 137 ) # # # j . b. rosser ( 1939 ) s. c. kleen ( 1943 ) j. barkley rosser boldli defin ‘ effect [ mathemat ] method ’ follow manner ( boldfac ad ) : '' 'effect method ' use rather special sens method step precis determin certain produc answer finit number step . special mean , three differ precis definit given date . [ footnot # 5 ; see discuss immedi ] . simplest state ( due post ture ) say essenti effect method solv certain set problem exist one build machin solv problem set human intervent beyond insert question ( later ) read answer . three definit equival , n't matter one use . moreov , fact three equival strong argument correct one . ( undecid , p. 225–226 ) rosser 's footnot # 5 refer work ( 1 ) church kleen definit λ-defin , particular church 's use unsolv problem elementari number theori ( 1936 ) ; ( 2 ) herbrand gödel use recurs particular gödel 's use famou paper formal undecid propost principia mathematica relat system ( 1931 ) ; ( 3 ) post ture mechanism-model comput . stephen c. kleen ( 1943 ) defin now-fam `` thesi '' known `` church-tur thesi '' . follow context ( boldfac origin ) : '' 12 . algorithm theori ... set complet algorithm theori , describ procedur , perform set valu independ variabl , procedur necessarili termin manner outcom read definit answer , `` ye '' `` , '' question , `` predic valu true ? ” '' ( undecid , p. 273 )