cpu cach cach use central process unit comput reduc averag time access memori . cach smaller , faster memori store copi data frequent use main memori locat . long memori access cach memori locat , averag latenc memori access closer cach latenc latenc main memori . diagram right show two memori . locat memori datum ( cach line ) , differ design rang size 8 512 byte . size cach line usual larger size usual access request cpu instruct , rang 1 16 byte . locat memori also index , uniqu number use refer locat . index locat main memori call address . locat cach tag , contain index datum main memori cach . cpu 's data cach , entri call cach line cach block . processor wish read write locat main memori , first check whether memori locat cach . accomplish compar address memori locat tag cach might contain address . processor find memori locat cach , say cach hit occur , otherwis speak cach miss . case cach hit , processor immedi read write data cach line . proport access result cach hit known hit rate , measur effect cach . case cach miss , cach alloc new entri , compris tag miss copi data memori . refer appli new entri case hit . miss slow requir data transfer main memori . transfer incur delay sinc main memori much slower cach memori . # # detail oper order make room new entri cach miss , cach gener evict one exist entri . heurist us choos entri evict call replac polici . fundament problem replac polici must predict exist cach entri least like use futur . predict futur difficult , especi hardwar cach use simpl rule amen implement circuitri , varieti replac polici choos perfect way decid among . one popular replac polici , lru , replac least recent use entri . data written cach , must point written main memori well . time write control known write polici . write-through cach , everi write cach caus write main memori . altern , write-back cach , write immedi mirror memori . instead , cach track locat written ( locat mark dirti ) . data locat written back main memori data evict cach . reason , miss write-back cach often requir two memori access servic : one read new locat memori write dirti locat memori . intermedi polici well . cach may write-through , write may held store data queue temporarili , usual multipl store process togeth ( reduc bu turnaround improv bu util ) . data main memori cach may chang entiti , case copi cach may becom out-of-d stale . altern , cpu updat data cach , copi data cach becom stale . commun protocol cach manag keep data consist known coher protocol . time taken fetch datum memori ( read latenc ) matter cpu often run thing wait datum . cpu reach state , call stall . cpu becom faster , stall due cach miss displac potenti comput ; modern cpu execut hundr instruct time taken fetch singl datum memori . variou techniqu employ keep cpu busi time . out-of-ord cpu ( pentium pro later intel design , exampl ) attempt execut independ instruct instruct wait cach miss data . pentium 4 us simultan multithread ( hyper-thread intel 's terminolog ) allow second program use cpu first program wait data come main memori . # # associ recal replac polici decid cach copi particular entri main memori go . replac polici free choos entri cach hold copi , cach call fulli associ . extrem , entri main memori go one place cach , cach direct map . mani cach implement compromis , describ set associ . exampl , level-1 data cach amd athlon 2-way set associ , mean particular locat main memori cach either 2 locat level-1 data cach . locat main memori cach either two locat cach , one logic question : two ? simplest commonli use scheme , shown right-hand diagram , use least signific bit memori locat 's index index cach memori , two entri index . one good properti scheme tag store cach includ part main memori address specifi cach memori 's index . sinc cach tag fewer bit , take less area read compar faster . scheme suggest , skew cach , index way 0 direct , , index way 1 form hash function . good hash function properti address conflict direct map tend conflict map hash function , less like program suffer unexpectedli larg number conflict miss due patholog access pattern . downsid extra latenc comput hash function . addit , come time load new line evict old line , may difficult determin exist line least recent use , new line conflict data differ index way ; lru track non-skew cach usual done per-set basi . associ tradeoff . ten place replac polici put new cach entri , cach check hit , ten place must search . check place take power , area , potenti time . hand , cach associ suffer fewer miss ( see conflict miss , ) . rule thumb doubl associ , direct map 2-way , 2-way 4-way , effect hit rate doubl cach size . associ increas beyond 4-way much less effect hit rate , gener done reason ( see virtual alias , ) . one advantag direct map cach allow simpl fast specul . address comput , one cach index might copi datum known . cach entri read , processor continu work data finish check tag actual match request address . idea processor use cach data tag match complet appli associ cach well . subset tag , call hint , use pick one possibl cach entri map request address . datum use parallel check full tag . hint techniqu work best use context address translat , explain . # # cach miss cach miss refer fail attempt read write piec data cach , result main memori access much longer latenc . three kind cach miss . cach read miss instruct cach gener caus delay , processor , least thread execut , wait ( stall ) instruct fetch main memori . cach read miss data cach usual caus less delay , instruct depend cach read issu continu execut data return main memori , depend instruct resum execut . cach write miss data cach gener caus least delay , write queu limit execut subsequ instruct . processor continu queue full . order lower cach miss rate , great deal analysi done cach behaviour attempt find best combin size , associ , block size , . sequenc memori refer perform benchmark program save address trace . subsequ analysi simul mani differ possibl cach design long address trace . make sens mani variabl affect cach hit rate quit confus . one signific contribut analysi made mark hill , separ miss three categori ( known three cs ) : compulsori miss miss caus first refer datum . cach size associ make differ number compulsori miss . prefetch help , larger cach block size ( form prefetch ) . capac miss miss occur regardless associ block size , sole due finit size cach . curv capac miss rate versu cach size give measur tempor local particular refer stream . note use notion cach `` full '' `` empti '' `` near capac '' : cpu cach almost alway nearli everi line fill copi line main memori , nearli everi alloc new line requir evict old line . conflict miss miss could avoid , cach evict entri earlier . conflict miss broken map miss , unavoid given particular amount associ , replac miss , due particular victim choic replac polici . graph right summar cach perform seen integ portion spec cpu2000 benchmark , collect hill cantin . benchmark intend repres kind workload engin workstat comput might see given day . see differ effect three cs graph . far right , cach size label `` inf '' , compulsori miss . wish improv machin 's perform specint2000 , increas cach size beyond 1 mib essenti futil . 's insight given compulsori miss . fully-associ cach miss rate almost repres capac miss rate . differ data present simul assum lru replac polici . show capac miss rate would requir perfect replac polici , i.e . oracl look futur find cach entri actual go hit . note approxim capac miss rate fall steepli 32 kib 64 kib . indic benchmark work set roughli 64 kib . cpu cach design examin benchmark strong incent set cach size 64 kib rather 32 kib . note , benchmark , amount associ make 32 kib cach perform well 64 kib 4-way , even direct-map 128 kib cach . final , note 64 kib 1 mib larg differ direct-map fully-associ cach . differ conflict miss rate . 2004 , on-chip secondari cach tend rang , smaller cach fast enough primari cach , larger cach becom larg produc econom on-chip ( itanium 2 9 mib level-3 on-chip cach , largest ship on-chip cach 2004 ) . insight look conflict miss rate secondari cach benefit great deal high associ . benefit well known late 80 earli 90 , cpu design could fit larg cach on-chip , could get suffici bandwidth either cach data memori cach tag memori implement high associ off-chip cach . desper hack attempt : mip r8000 use expens off-chip dedic tag sram , embed tag compar larg driver match line , order implement 4 mib 4-way associ cach . mip r10000 use ordinari sram chip tag . tag access way took two cycl . reduc latenc , r10000 would guess way cach would hit access . # # address translat gener purpos cpu implement form virtual memori . summar , program run machin see simplifi address space , contain code data program . program place thing address space without regard program address space . virtual memori requir processor translat virtual address gener program physic address main memori . portion processor translat known memori manag unit ( mmu ) . fast path mmu perform translat store awkwardli name translat lookasid buffer ( tlb ) , cach map oper system 's page tabl . purpos present discuss , three import featur address translat : latenc : physic address avail mmu time , perhap cycl , virtual address avail address gener . alias : multipl virtual address map singl physic address . processor guarante updat singl physic address happen program order . deliv guarante , processor must ensur one copi physic address resid cach given time . granular : virtual address space broken page . instanc , 4 gib virtual address space might cut 1048576 4 kib page , independ map . may multipl page size support , see virtual memori elabor . histor note : first virtual memori system slow , requir access page tabl ( held main memori ) everi program access main memori . cach , effect cut speed machin half . first hardwar cach use comput system actual data instruct cach , rather tlb . exist differ physic virtual address rais question whether virtual physic address use cach index tag . motiv use virtual address speed : virtually-index , virtually-tag data cach cut mmu entir load-us recurr . latenc recurr ( load latenc ) crucial perform cpu . modern level-1 cach virtual index , least allow mmu 's tlb lookup proceed parallel fetch data cach ram . virtual index alway best choic . introduc problem virtual alia -- cach may multipl locat store valu singl physic address . cost deal virtual alia grow cach size , result level-2 larger cach physic index . virtual tag uncommon . tlb lookup finish cach ram lookup , physic address avail time tag compar , need virtual tag . larg cach , , tend physic tag , small , low latenc cach virtual tag . recent general-purpos cpu , virtual tag supersed vhint , describ . # # # virtual index virtual alia usual way processor guarante virtual alias address act singl storag locat arrang one virtual alia cach given time . whenev new entri ad virtually-index cach , processor search virtual alia alreadi resid evict first . special handl happen cach miss . special work necessari cach hit , help keep fast path fast . straightforward way find alia arrang map locat cach . happen , instanc , tlb e.g . 4 kib page , cach direct map 4 kib less . modern level-1 cach much larger 4 kib , virtual memori page stay size . cach e.g . 16 kib virtual index , virtual address four cach locat could hold physic locat , alias differ virtual address . cach miss , four locat must probe see correspond physic address match physic address access gener miss . probe check set associ cach us select particular match . 16 kib virtual index cach 4-way set associ use 4 kib virtual memori page , special work necessari evict virtual alia cach miss check alreadi happen check cach hit . use amd athlon exampl , 64 kib level-1 data cach , 4 kib page , 2-way set associ . level-1 data cach suffer miss , 2 16 ( ==64 kib/4 kib ) possibl virtual alia alreadi check , seven cycl tag check hardwar necessari complet check virtual alia . # # # virtual tag vhint virtual tag possibl . great advantag virtual tag , associ cach , allow tag match proceed virtual physic translat done . howev , coher probe evict present physic address action . hardwar must mean convert physic address cach index , gener store physic tag well virtual tag . comparison , physic tag cach need keep virtual tag , simpler . virtual physic map delet tlb , cach entri virtual address flush somehow . altern , cach entri allow page map tlb , entri flush access right page chang page tabl . also possibl oper system ensur virtual alia simultan resid cach . oper system make guarante enforc page color , describ . earli risc processor ( sparc , rs/6000 ) took approach . use recent , hardwar cost detect evict virtual alia fallen softwar complex perform penalti perfect page color risen . use distinguish two function tag associ cach : use determin way entri set select , use determin cach hit miss . second function must alway correct , permiss first function guess , get wrong answer occasion . processor ( e.g . earli sparc ) cach virtual physic tag . virtual tag use way select , physic tag use determin hit miss . kind cach enjoy latenc advantag virtual tag cach , simpl softwar interfac physic tag cach . bear ad cost duplic tag , howev . also , miss process , altern way cach line index probe virtual alia match evict . extra area ( latenc ) mitig keep virtual hint cach entri instead virtual tag . hint subset hash virtual tag , use select way cach get data physic tag . like virtual tag cach , may virtual hint match physic tag mismatch , case cach entri match hint must evict cach access cach fill address one hint match . sinc virtual hint fewer bit virtual tag distinguish one anoth , virtual hint cach suffer conflict miss virtual tag cach . perhap ultim reduct virtual hint found pentium 4 ( willamett northwood core ) . processor virtual hint effect 2 bit , cach 4-way set associ . effect , hardwar maintain simpl permut virtual address cach index , cam necessari select right one four way fetch . # # # page color larg physic index cach ( usual secondari cach ) run problem : oper system rather applic control page collid one anoth cach . differ page alloc one program run next lead differ cach collis pattern , lead larg differ program perform . differ make difficult get consist repeat time benchmark run , lead frustrat sale engin demand oper system author fix problem . understand problem , consid cpu 1 mib physic index direct-map level-2 cach 4 kib virtual memori page . sequenti physic page map sequenti locat cach 256 page pattern wrap around . label physic page colour 0-255 denot cach go . locat within physic page differ color conflict cach . programm attempt make maximum use cach may arrang program 's access pattern 1 mib data need cach given time , thu avoid capac miss . also ensur access pattern conflict miss . one way think problem divid virtual page program us assign virtual color way physic color assign physic page . programm arrang access pattern code two page virtual colour use time . wide literatur optim ( e.g . loop nest optim ) , larg come high perform comput ( hpc ) commun . snag page use given moment may differ virtual color , may physic color . fact , oper system assign physic page virtual page randomli uniformli , extrem like page physic colour , locat page collid cach ( birthday paradox ) . solut oper system attempt assign differ physic colour page differ virtual color , techniqu call page color . although actual map virtual physic colour irrelev system perform , odd map difficult keep track littl benefit , approach page color simpli tri keep physic virtual page color . oper system guarante physic page map one virtual color , virtual alia , processor use virtual index cach need extra virtual alia probe miss handl . altern , o/ flush page cach whenev chang one virtual colour anoth . mention , approach use earli sparc rs/6000 design . # # cach hierarchi modern processor modern processor multipl interact cach chip . two issu driven develop modern cach hierarchi . # # # special cach first issu pipelin cpu access memori multipl point pipelin : instruct fetch , virtual-to-phys address translat , data fetch . simpl exampl , see classic risc pipelin . natur design use differ physic cach point , one physic resourc schedul servic two point pipelin . thu pipelin natur end least three separ cach ( instruct , tlb , data ) , special particular role . # # # # victim cach victim cach cach use hold block evict cpu cach due conflict capac miss . victim cach lie main cach refil path , hold block evict cach miss . techniqu use reduc penalti incur cach miss . origin victim cach hp pa7200 small , fully-associ cach . later processor , amd k7 k8 , use larg secondari cach victim cach , avoid duplic storag content larg primari cach . # # # # trace cach one extrem exampl cach special trace cach found intel pentium 4 microprocessor . trace cach mechan increas instruct fetch bandwidth decreas power consumpt ( case pentium 4 ) store trace instruct alreadi fetch decod . mechan first propos eric rotenberg , steve bennett , jim smith 1996 paper `` trace cach : low latenc approach high bandwidth instruct fetch . '' trace cach store instruct either decod , retir . gener , instruct ad trace cach group repres either individu basic block dynam instruct trace . basic block consist group non-branch instruct end branch . dynam trace ( `` trace path '' ) contain instruct whose result actual use , elimin instruct follow taken branch ( sinc execut ) ; dynam trace concaten multipl basic block . allow instruct fetch unit processor fetch sever basic block , without worri branch execut flow . trace line store trace cach base program counter first instruct trace set branch predict . allow store differ trace path start address , repres differ branch outcom . instruct fetch stage pipelin , current program counter along set branch predict check trace cach hit . hit , trace line suppli fetch go regular cach memori instruct . trace cach continu feed fetch unit trace line end mispredict pipelin . miss , new trace start built . trace cach also use processor like intel pentium 4 store alreadi decod micro-oper , translat complex x86 instruct , next time instruct need , decod . see full text smith , rotenberg bennett 's paper cites . # # # # harvard architectur pipelin separ instruct data cach said harvard architectur . origin , phrase refer machin separ instruct data memori , way program alter instruct . # # # multi-level cach second issu fundament tradeoff cach latenc hit rate . larger cach better hit rate longer latenc . amelior tradeoff , mani comput use multipl level cach , small fast cach back larger slower cach . latenc differ main memori fastest cach becom larger , processor begun util mani three level on-chip cach . exampl , 2003 , itanium ii began ship 6 mib unifi level 3 cach on-chip . ibm power 4 seri 256 mib level 3 cach chip , share among sever processor . multi-level cach gener oper check smallest level 1 cach first ; hit , processor proce high speed . smaller cach miss , next larger cach check , , main memori check . multi-level cach introduc new design decis . instanc , processor ( like intel pentium 2 , 3 , 4 , well risc ) , data l1 cach may also l2 cach . cach call inclus . processor ( like amd athlon ) exclus cach — data guarante one l1 l2 cach . advantag exclus cach store data . advantag larger larger cach . l1 miss l2 hit access , hit cach line l2 exchang line l1 . exchang quit bit work copi line l2 l1 , inclus cach . implement inclus cach guarante data l1 cach also l2 cach . one advantag strictli inclus cach extern devic processor multiprocessor system wish remov cach line processor , need processor check l2 cach . cach hierarchi enforc inclus , l1 cach must check well . drawback , correl associ l1 l2 cach : l2 cach least much way l1 cach togeth , effect associ l1 cach restrict . anoth advantag inclus cach larger cach use larger cach line , reduc size secondari cach tag . secondari cach order magnitud larger primari , cach data order magnitud larger cach tag , tag area save compar increment area need store l1 cach data l2 . mention , larger comput sometim anoth cach l2 cach main memori call l3 cach . cach implement separ chip cpu , , 2004 , may rang size 2 256 megabyt . chip l3 cach gener cost well excess $ 1000 implement , benefit depend applic 's access pattern . high-end x86 workstat server avail l3 cach option implement microprocessor die , increas speed reduc cost substanti . exampl , intel 's xeon mp product code-nam `` tulsa '' featur 16 mib on-di l3 cach , share two processor core . final , end memori hierarchi , cpu regist file consid smallest , fastest cach system , special characterist schedul softwar -- typic compil , alloc regist hold valu retriev main memori . ( see especi loop nest optim . ) regist file sometim also hierarchi : cray-1 ( circa 1976 ) 8 address `` '' 8 scalar data `` '' regist gener usabl . also set 64 address `` b '' 64 scalar data `` '' regist took longer access , faster main memori . `` b '' `` '' regist provid cray-1 data cach . ( cray-1 , howev , instruct cach . ) # # # exampl : k8 illustr special multi-level cach , cach hierarchi amd athlon 64 , whose core design known k8 . k8 4 special cach : instruct cach , instruct tlb , data tlb , data cach . cach special : instruct cach keep copi 64 byte line memori , fetch 16 byte cycl . byte cach store ten bit rather 8 , extra bit mark boundari instruct ( exampl predecod ) . cach pariti protect rather ecc , pariti smaller damag data replac fresh data fetch memori ( alway up-to-d copi instruct ) . instruct tlb keep copi page tabl entri ( pte ) . cycl 's instruct fetch virtual address translat tlb physic address . entri either 4 8 byte memori . tlb split two section , one keep pte map 4 kib , one keep pte map 4 mib 2 mib . split allow fulli associ match circuitri section simpler . oper system map differ section virtual address space differ size pte . data tlb two copi keep ident entri . two copi allow two data access per cycl translat virtual address physic address . like instruct tlb , tlb split two kind entri . data cach keep copi 64 byte line memori . split 8 bank ( store 8 kib data ) , fetch two 8-byte data cycl long data differ bank . two copi tag , 64 byte line spread among 8 bank . tag copi handl one two access per cycl . k8 also multiple-level cach . second-level instruct data tlb , store pte map 4 kib . instruct data cach , variou tlb , fill larg unifi l2 cach . cach exclus l1 instruct data cach , mean 8-byte line one l1 instruct cach , l1 data cach , l2 cach . , howev , possibl line data cach pte also one tlbs—the oper system respons keep tlb coher flush portion page tabl memori updat . k8 also cach inform never store memory—predict inform . cach shown diagram . usual class cpu , k8 fairli complex branch predict , tabl help predict whether branch taken tabl predict target branch jump . inform associ instruct , level 1 instruct cach unifi secondari cach . k8 us interest trick store predict inform instruct secondari cach . line secondari cach protect accident data corrupt ( e.g . alpha particl strike ) either ecc pariti , depend whether line evict data instruct primari cach . sinc pariti code take fewer bit ecc code , line instruct cach spare bit . bit use cach branch predict inform associ instruct . net result branch predictor larger effect histori tabl , better accuraci . # # # hierarchi processor kind predictor ( e.g . store-to-load bypass predictor dec alpha 21264 ) , variou special predictor like flourish futur processor . predictor cach sens store inform costli comput . terminolog use discuss predictor cach ( one speak hit branch predictor ) , predictor gener thought part cach hierarchi . k8 keep instruct data cach coher hardwar , mean store instruct close follow store instruct chang follow instruct . processor , like alpha mip famili , reli softwar keep instruct cach coher . store guarante show instruct stream program call oper system facil ensur coher . idea save hardwar complex assumpt self-modifi code rare . # # implement cach read common cpu oper take singl cycl . program execut time tend sensit latenc level-1 data cach hit . great deal design effort , often power silicon area expend make cach fast possibl . simplest cach virtual index direct-map cach . virtual address calcul adder , relev portion address extract use index sram , return load data . data byte align byte shifter , bypass next oper . need tag check inner loop — fact , tag need even read . later pipelin , load instruct retir , tag load data must read , check virtual address make sure cach hit . miss , cach updat request cach line pipelin restart . associ cach complic , form tag must read determin entri cach select . n-way set-associ level-1 cach usual read n possibl tag n data parallel , choos data associ match tag . level-2 cach sometim save power read tag first , one data element read data sram . diagram right intend clarifi manner variou field address use . address bit label littl endian notat : bit 31 signific ; bit 0 least signific . diagram show sram , index , multiplex 4 kib , 2-way set-associ , virtual index virtual tag cach 64 b line , 32b read width 32b virtual address . cach 4 kib 64 b line , 64 line cach , read two time tag sram 32 row , pair 21 bit tag . although function virtual address bit 31 6 could use index tag data sram , simplest use least signific bit . similarli , cach 4 kib 4 b read path , read two way access , data sram 512 row 8 byte wide . modern cach might 16 kib , 4-way set-associ , virtual index , virtual hint , physic tag , 32 b line , 32b read width 36b physic address . read path recurr cach look similar path . instead tag , vhint read , match subset virtual address . later pipelin , virtual address translat physic address tlb , physic tag read ( one , vhint suppli way cach read ) . final physic address compar physic tag determin hit occur . sparc design improv speed l1 cach gate delay collaps virtual address adder sram decod . see sum address decod .