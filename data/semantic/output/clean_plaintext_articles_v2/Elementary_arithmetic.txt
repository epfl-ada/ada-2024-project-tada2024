elementari arithmet basic kind mathemat : concern oper addit , subtract , multipl , divis . peopl learn elementari arithmet elementari school . elementari arithmet start natur number arab numer use repres . requir memor addit tabl multipl tabl ad multipli pair digit . know tabl , person perform certain well-known procedur ad multipli natur number . algorithm use subtract divis . mental arithmet elementari arithmet perform head , exampl know 100 âˆ’ 37 = 63 without use paper . everyday skill . extend form mental calcul may involv calcul extrem larg number , skill usual taught elementari level . elementari arithmet move fraction , decim , neg number , repres number line . nowaday peopl routin use electron calcul , cash regist , comput perform elementari arithmet . earlier calcul tool includ slide rule ( multipl , divis , log trig ) , tabl logarithm , nomograph , mechan calcul . question whether calcul use , whether tradit mathemat manual comput method still taught elementari school provok heat controversi mani standards-bas mathemat text deliber omit standard comput method . 1989 nctm standard led curriculum de-emphas ommit much consid elementari arithmet elementari school , replac emphasi topic tradit studi colleg algebra , statist problem solv . ancient time , mani part asia , abacu still often use perform elementari arithmet skill user fast calcul may requir batteri . 14th centuri arab numer introduc europ leonardo pisano . numer effici perform calcul roman numer , posit system . # # digit 0 , zero , repres absenc object count . 1 , one . one stick : 2 , two . two stick : 3 , three . three stick : 4 , four . four stick : 5 , five . five stick : 6 , six . six stick : 7 , seven . seven stick : 8 , eight . eight stick : 9 , nine . nine stick : mani digit finger hand : word `` digit '' also mean finger . count digit hand , first digit would one last digit would count `` zero '' `` ten '' : 10 , made digit one zero . number 10 first two-digit number . ten stick : number one digit , rightmost digit , said last digit , call `` ones-digit '' . digit immedi left `` tens-digit '' . digit immedi left tens-digit `` hundreds-digit '' . digit immedi left hundreds-digit `` thousands-digit '' . # # addit mean add two natur number ? suppos two bag , one bag hold five appl second bag hold three appl . grab third , empti bag , move appl first second bag third bag . third bag hold eight appl . illustr combin three appl five appl eight appl ; gener : `` three plu five eight '' `` three plu five equal eight '' `` eight sum three five '' . number abstract , addit group three thing group five thing yield group eight thing . addit regroup : two set object count separ put singl group count togeth : count new group `` sum '' separ count two origin group . symbol , addit repres `` plu sign '' : + . statement `` three plu five equal eight '' written symbol 3 + 5 = 8 . order two number ad matter , 3 + 5 = 5 + 3 = 8 . commut properti addit . add pair digit use tabl , find intersect row first digit column second digit : row column intersect squar contain sum two digit . pair digit add two-digit number , tens-digit alway 1 . addit algorithm tens-digit sum pair digit call `` carri digit '' . # # # addit algorithm simplic , consid number three digit less . add pair number ( written arab numer ) , write second number first one , digit line column : rightmost column contain ones-digit second number ones-digit first number . rightmost column ones-column . column immedi left tens-column . tens-column tens-digit second number ( one ) tens-digit first number ( one ) . column immedi left tens-column hundreds-column . hundreds-column line hundreds-digit second number ( one ) hundreds-digit first number ( one ) . second number written first one digit line correct column , draw line second ( bottom ) number . start ones-column : ones-column contain pair digit : ones-digit first number , , ones-digit second number . find sum two digit : write sum line ones-column . sum two digit , write ones-digit sum . write `` carri digit '' top digit next column : case next column tens-column , write 1 tens-digit first number . first second number one digit sum given addit tabl , addit algorithm unnecessari . come tens-column . tens-column might contain two digit : tens-digit first number tens-digit second number . one number miss tens-digit tens-digit number consid zero . add tens-digit two number . , carri digit , add sum . sum 18 ad carri digit yield 19 . sum tens-digit ( plu carri digit , one ) less ten write tens-column line . sum two digit write last digit tens-column line , carri first digit ( one ) next column : case hundr column . none two number hundreds-digit carri digit addit algorithm finish . carri digit ( carri tens-column ) write hundreds-column line , algorithm finish . algorithm finish , number line sum two number . least one number hundreds-digit one number miss hundreds-digit write zero digit place . add two hundreds-digit , sum add carri digit one . write sum hundreds-column line , also hundr column . sum two digit write last digit sum hundreds-column write carri digit left : thousands-column . # # # exampl say one want find sum number 653 274 . write second number first one , digit align column , like : draw line second number start ones-column . ones-digit first number 3 second number 4 . sum three four seven , write seven ones-column line : next , tens-column . tens-digit first number 5 , tens-digit second number 7 , five plu seven twelv : 12 , two digit , write last digit , 2 , tens-column line , write carri digit hundreds-column first number : next , hundreds-column . hundreds-digit first number 6 , hundreds-digit second number 2 . sum six two eight , carri digit , ad eight equal nine . write nine line hundreds-column : digit ( column ) left unad , algorithm finish , 653 + 274 = 927 . # # successorship size result addit one number successor number . exampl : successor zero one , successor one two , successor two three , successor ten eleven . everi natur number successor . predecessor successor number number . exampl , five successor four therefor four predecessor five . everi natur number except zero predecessor . number successor anoth number , first number said larger number . number larger anoth number , number larger third number , first number also larger third number . exampl : five larger four , four larger three , therefor five larger three . six larger five , therefor six also larger three . seven larger six , therefor seven also larger three ... therefor eight larger three ... therefor nine larger three , etc . two non-zero natur number ad togeth , sum larger either one . exampl : three plu five equal eight , therefor eight larger three ( 8 > 3 ) eight larger five ( 8 > 5 ) . symbol `` larger '' > . number larger anoth one , smaller first one . exampl : three smaller eight ( 3 < 8 ) five smaller eight ( 5 < 8 ) . symbol smaller < . number time larger smaller anoth number . neither number time larger equal anoth number . given pair natur number , one one follow case must true : first number larger second one , first number equal second one , first number smaller second one . # # count count group object mean assign natur number one object , label object , natur number never assign object unless predecessor alreadi assign anoth object , except zero assign object : smallest natur number assign one , largest natur number assign depend size group . call count equal number object group . process count group follow : step 1 : let `` count '' equal zero . `` count '' variabl quantiti , though begin valu zero , soon valu chang sever time . step 2 : find least one object group label natur number . object found ( label ) count finish . otherwis choos one unlabel object . step 3 : increas count one . , replac valu count successor . step 4 : assign new valu count , label , unlabel object chosen step 2 . step 5 : go back step 2 . count finish , last valu count final count . count equal number object group . often , count object , one keep track numer label correspond object : one keep track subgroup object alreadi label , abl identifi unlabel object necessari step 2 . howev , one count person , one ask person count keep track number person 's self assign . count finish possibl ask group person file line , order increas numer label . person would process line would someth like : pair person unsur posit line ask number : person whose number smaller stand left side one larger number right side person . thu , pair person compar number posit , commut posit necessari , repetit condit commut becom order . # # algorithm subtract sever method accomplish subtract . tradit mathemat taught elementari school child subtract use method suitabl hand calcul . particular method use vari countri countri , within countri , differ method fashion differ time . standards-bas mathemat distinguish gener lack prefer standard method , replac guid 2nd grade child invent method comput , use properti neg number case terc . american school current teach method subtract use borrow system mark call crutch . although method borrow known publish textbook prior , appar crutch invent william a. browel use studi novemb 1937 . system caught rapidli , displac method subtract use america time . european child taught , older american employ , method subtract call austrian method , also known addit method . borrow method . also crutch ( mark aid memori ) [ probabl ] vari accord countri . method borrow , subtract 86 - 39 accomplish one 's place subtract 9 6 borrow 10 80 ad 6 . problem thu transform ( 70+16 ) -39 , effect . indic strike 8 , write small 7 , write small 1 6 . mark call crutch . 9 subtract 16 , leav 7 , 30 70 , leav 40 , 47 result . addit method , 10 borrow make 6 16 , prepar subtract 9 , borrow method . howev , 10 taken reduc minuend , rather one augment subtrahend . effect , problem transform ( 80+16 ) - ( 39+10 ) . typic crutch small one mark subtrahend digit remind . oper proceed : 9 16 7 ; 40 ( , 30+10 ) 80 40 , 47 result . addit method seem taught two variat , differ psycholog . continu exampl 86-39 , first variat attempt subtract 9 6 , 9 16 , borrow 10 mark near digit subtrahend next column . second variat attempt find digit , ad 9 give 6 , recogn possibl , give 16 , carri 10 16 one mark near digit first method . mark , matter prefer one explain appear . final caution , borrow method get bit complic case 100-87 , borrow made immedi , must obtain reach across sever column . case , minuend effect rewriten 90+10 , take one hundr hundr , make ten ten , immedi borrow 9 ten ten column final place ten one 's column . sever method , particularli advantag machin calcul . exampl , digit comput employ method two 's complement . great import count method chang made . suppos amount p given pay requir amount q , p greater q . rather perform subtract p-q count amount chang , money count start q continu reach p. curious , although amount count must equal result subtract p-q , subtract never realli done valu p-q might still unknown change-mak . 1 subtract unit state : histori perspect , susan ross , mari pratt-cott , mathemat educ , vol . 8 , . 1 . browel , w. . ( 1939 ) . learn reorgan : experiment studi third-grad arithmet , duke univers press . see also : method complement subtract without borrow # # multipl two number multipli togeth , result call product . two number multipli togeth call factor . mean multipli two natur number ? suppos five red bag , one contain three appl . grab empti green bag , move appl five red bag green bag . green bag fifteen appl . thu product five three fifteen . also state `` five time three fifteen '' `` five time three equal fifteen '' `` fifteen product five three '' . multipl seen form repeat addit : first factor indic mani time second factor ad onto ; final sum product . symbol , multipl repres multipl sign : . statement `` five time three equal fifteen '' written symbol countri , advanc arithmet , multipl sign use , e.g . . situat , especi algebra , number symbol letter , multipl symbol may omit ; e.g x mean . order two number multipli matter , , exampl , three time four equal four time three . commut properti multipl . multipli pair digit use tabl , find intersect row first digit column second digit : row column intersect squar contain product two digit . pair digit produc two-digit number . multipl algorithm tens-digit product pair digit call `` carri digit '' . # # # multipl algorithm single-digit factor consid multipl one factor one digit , wherea factor arbitrari quantiti digit . write multi-digit factor , write single-digit factor last digit multi-digit factor . draw horizont line single-digit factor . henceforth , single-digit factor call `` multipli '' multi-digit factor call `` multiplicand '' . suppos simplic multiplicand three digit . first digit hundreds-digit , middl digit tens-digit , last , rightmost , digit ones-digit . multipli ones-digit . ones-digit multiplicand multipli form column : ones-column . start ones-column : ones-column contain pair digit : ones-digit multiplicand , , ones-digit multipli . find product two digit : write product line ones-column . product two digit , write ones-digit product . write `` carri digit '' superscript yet-unwritten digit next column line : case next column tens-column , write carri digit superscript yet-unwritten tens-digit product ( line ) . first second number one digit product given multipl tabl , multipl algorithm unnecessari . come tens-column . tens-column far contain one digit : tens-digit multiplicand ( though might contain carri digit line ) . find product multipli tens-digit multiplicand . , carri digit ( superscript , line tens-column ) , add product . result sum less ten write tens-column line . sum two digit write last digit tens-column line , carri first digit next column : case hundr column . multiplicand hundreds-digit carri digit multipl algorithm finish . carri digit ( carri tens-column ) write hundreds-column line , algorithm finish . algorithm finish , number line product two number . multiplicand hundreds-digit ... find product multipli hundreds-digit multiplicand , product add carri digit one . write result sum hundreds-column line , also hundr column . sum two digit write last digit sum hundreds-column write carri digit left : thousands-column . # # # exampl say one want find product number 3 729 . write single-digit multipli multi-digit multiplicand , multipli ones-digit multiplicand , like : draw line multipli start ones-column . ones-digit multiplicand 9 multipli 3 . product three nine 27 , write seven ones-column line , write carry-digit 2 superscript yet-unwritten tens-digit product line : next , tens-column . tens-digit multiplicand 2 , multipli 3 , three time two six . add carry-digit , 2 , product 6 obtain 8 . eight one digit : carry-digit , write tens-column line : next , hundreds-column . hundreds-digit multiplicand 7 , multipli 3 . product three seven 21 , previou carry-digit ( carri tens-column ) . product 21 two digit : write last digit hundreds-column line , carri first digit thousands-column . sinc multiplicand thousands-digit , write carry-digit thousands-column line ( superscript ) : digit multiplicand left unmultipli , algorithm finish , . # # # multipl algorithm multi-digit factor given pair factor , one two digit , write factor , one one , digit line column . simplic consid pair three-digit number . write last digit second number last digit first number , form ones-column . immedi left ones-column tens-column : top column second digit first number , second digit second number . immedi left tens-column hundreds-column : top column first digit first number first digit second number . written factor , draw line second factor . multipl consist two part . first part consist sever multipl involv one-digit multipli . oper one multipl alreadi describ previou multipl algorithm , algorithm describ one individu , describ sever multipl one-digit multipli shall coÃ¶rdin . second part add subproduct first part , result sum product . first part . let first factor call multiplicand . let digit second factor call multipli . let ones-digit second factor call `` ones-multipli '' . let tens-digit second factor call `` tens-multipli '' . let hundreds-digit second factor call `` hundreds-multipli '' . start ones-column . find product ones-multipli multiplicand write row line , align digit product previously-defin column . product four digit , first digit begin thousands-column . let product call `` ones-row '' . tens-column . find product tens-multipli multiplicand write row â€” call `` tens-row '' â€” ones-row , shift one column left . , ones-digit tens-row tens-column ones-row ; tens-digit tens-row hundreds-digit ones-row ; hundreds-digit tens-row thousands-digit ones-row . tens-row four digit , first digit begin ten-thousands-column . next , hundreds-column . find product hundreds-multipli multiplicand write row â€” call `` hundreds-row '' â€” tens-row , shift one column left . , ones-digit hundreds-row hundreds-column ; tens-digit hundreds-row thousands-column ; hundreds-digit hundreds-row ten-thousands-column . hundreds-row four digit , first digit begin hundred-thousands-column . ones-row , tens-row , hundreds-row , draw horizont line hundreds-row . multipl . second part . multipl pair line . first one pair factor , second one three row subproduct . second line six column , right left follow : ones-column , tens-column , hundreds-column , thousands-column , ten-thousands-column , hundred-thousands-column . first second line , ones-column contain one digit , locat ones-row : ones-digit ones-row . copi digit rewrit ones-column second line . first second line , tens-column contain pair digit locat ones-row tens-row : tens-digit ones-row ones-digit tens-row . add digit sum one digit write digit tens-column second line . sum two digit first digit carry-digit : write last digit tens-column second line carri first digit hundreds-column , write superscript yet-unwritten hundreds-digit second line . first second line , hundreds-column contain three digit : hundreds-digit ones-row , tens-digit tens-row , ones-digit hundreds-row . find sum three digit , carry-digit tens-column ( written superscript second line hundreds-column ) add carry-digit well . result sum one digit write second line hundreds-column ; two digit write last digit line hundreds-column , carri first digit thousands-column , write superscript yet-unwritten thousands-digit line . first second line , thousands-column contain either two three digit : hundreds-digit tens-row , tens-digit hundreds-row , ( possibl ) thousands-digit ones-row . find sum digit , carry-digit hundreds-column ( written superscript second line thousands-column ) add carry-digit well . result sum one digit write second line thousands-column ; two digit write last digit line thousands-column , carri first digit ten-thousands-column , write superscript yet-unwritten ten-thousands-digit line . first second line , ten-thousands-column contain either one two digit : hundreds-digit hundreds-column ( possibl ) thousands-digit tens-column . find sum digit ( one tens-row miss think zero ) , carry-digit thousands-column ( written superscript second line ten-thousands-column ) add carry-digit well . result sum one digit write second line ten-thousands-column ; two digit write last digit line ten-thousands-column , carri first digit hundred-thousands-column , write superscript yet-unwritten ten-thousand digit line . howev , hundreds-row thousands-digit write carry-digit superscript , normal size , posit hundred-thousands-digit second line , multipl algorithm . hundreds-row thousands-digit , add carry-digit previou row ( carry-digit think zero ) write single-digit sum hundred-thousands-column second line . number second line sought-aft product pair factor first line . # # # exampl let object find product 789 345 . write 345 789 three column , draw horizont line : first part . start ones-column . multiplicand 789 ones-multipli 5 . perform multipl row line : tens-column . multiplicand 789 tens-multipli 4 . perform multipl tens-row , previou subproduct ones-row , shift one column left : next , hundreds-column . multiplicand 789 , hundreds-multipli 3 . perform multipl hundreds-row , previou subproduct tens-row , shift one ( ) column left . draw horizont line hundreds-row : second part . add subproduct first second line , ignor superscript carry-digit locat first second line . answer