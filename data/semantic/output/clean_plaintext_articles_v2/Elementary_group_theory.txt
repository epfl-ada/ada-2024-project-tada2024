mathemat , group ( g , * ) usual defin : g set * associ binari oper g , obey follow rule ( axiom ) : a1 . ( closur ) b g , * b g a2 . ( associ ) , b , c g , ( * b ) * c = * ( b * c ) . a3 . ( ident ) g contain element , often denot e , g , * e = e * = . call element ident ( g , * ) . ( show e uniqu later . ) a4 . ( invers ) g , exist element b g * b = b * = e . call b invers . ( show b uniqu later . ) closur associ part definit `` associ binari oper '' , sometim omit , particularli closur . note : * necessarili multipl . addit work well , mani less standard oper . * standard oper , use standard symbol instead ( exampl , + addit ) . * addit commut oper ( except multipl ) , ident usual denot 0 invers - . oper alway denot someth * , often + , avoid confus multipl . * multipl non-commut oper , ident usual denot 1 invers -1 . oper often omit , * b often written ab . ( g , * ) usual pronounc `` group g * '' . affirm group ( exampl , theorem ) , say `` g group * '' . group ( g , * ) often refer `` group g `` simpli `` g `` ; oper `` * '' fundament descript group . # # exampl # # # ( r , + ) group real number ( r ) group addit ( + ) . closur : clear ; ad two number give anoth number . associ : clear ; , b , c r , ( + b ) + c = + ( b + c ) . ident : 0 . r , +0= . ( henc denot 0 ident ) invers : r , - + =0 . ( henc denot - invers ) # # # ( r , * ) group real number ( r ) group multipl ( * ) . ident : 1 . invers : 0 * =0 r , 0 invers . # # # ( r # , * ) group real number without 0 ( r # ) group multipl ( * ) . closur : clear ; multipli two number give anoth number . associ : clear ; , b , c r , ( * b ) * c = * ( b * c ) . ident : 1 . r , * 1= . ( henc denot 1 ident ) invers : r , -1 * =1 . ( henc denot -1 invers ) # # basic theorem # # # invers relat commut theorem 1.1 : g , -1 * = e . expand -1 * , get -1 * = -1 * * e ( a3 ' ) -1 * * e = -1 * * ( -1 * ( -1 ) -1 ) ( a4 ' , -1 invers denot ( -1 ) -1 ) -1 * * ( -1 * ( -1 ) -1 ) = -1 * ( * -1 ) * ( -1 ) -1 = -1 * e * ( -1 ) -1 ( associ a4 ' ) -1 * e * ( -1 ) -1 = -1 * ( -1 ) -1 = e ( a3 ' a4 ' ) therefor , -1 * = e # # # ident relat commut theorem 1.2 : g , e * = . expand e * , e * = ( * -1 ) * ( a4 ) ( * -1 ) * = * ( -1 * ) = * e ( associ previou theorem ) * e = ( a3 ) therefor e * = # # # latin squar properti theorem 1.3 : , b g , exist uniqu x g * x = b . certainli , least one x exist , let x = -1 * b , x g ( a1 , closur ) ; * x = * ( -1 * b ) ( substitut x ) * ( -1 * b ) = ( * -1 ) * b ( associ a2 ) . ( * -1 ) * b = e * b = b . ( ident a3 ) . thu x alway exist satisfi * x = b . show uniqu , * x = b , x = e * x e * x = ( -1 * ) * x ( -1 * ) * x = -1 * ( * x ) -1 * ( * x ) = -1 * b thu , x = -1 * b similarli , , b g , exist uniqu g * = b . # # # ident uniqu theorem 1.4 : ident element group ( g , * ) uniqu . * e = ( a3 ) appli theorem 1.3 , b = . altern proof : suppos g two ident element , e f say . e * f = e , a3 ' , also e * f = f , theorem 1.2 . henc e = f . result , speak ident element ( g , * ) rather ident element . differ group discuss compar , often e g use identifi ident ( g , * ) . # # # invers uniqu theorem 1.5 : invers element ( g , * ) uniqu ; equival , g , * x = e x = -1 . x = -1 , * x = e a4 . appli theorem 1.3 , b = e . altern proof : suppos element g g two invers , h k say . h = h * e = h * ( g * k ) = ( h * g ) * k = e * k = k ( equal justifi a3 ' ; a4 ' ; a2 ; theorem 1.1 ; theorem 1.2 , respect ) . result , speak invers element x , rather invers . # # # invert twice get back start theorem 1.6 : belong group ( g , * ) , ( -1 ) -1 = . -1 * = e . therefor conclus follow theorem 1.4 . # # # invers ab theorem 1.7 : , b belong group ( g , * ) , ( * b ) -1 = b -1 * -1 . ( * b ) * ( b -1 * -1 ) = * ( b * b -1 ) * -1 = * e * -1 = * -1 = e therefor conclus follow theorem 1.4 . # # # cancel theorem 1.8 : , x , , belong group ( g , * ) , * x = * , x = ; x * = * , x = . * x = * : -1 * ( * x ) = -1 * ( * ) ( -1 * ) * x = ( -1 * ) * e * x = e * x = x * = * ( x * ) * -1 = ( * ) * -1 x * ( * -1 ) = * ( * -1 ) x * e = * e x = # # # repeat use * theorem 1.9 : everi group ( g , * ) , defin : howev , oper note + , note : ( gener associ . ) # # # group non-trivi element order 2 theorem 1.10 : group non-trivi element order 2 abelian . word , element g group g satisfi g * g = e , 2 element g , h g , g * h = h * g . let g , h 2 element group g a1 , g * h also member g use given condit , know ( g * h ) * ( g * h ) = e . g * ( g * h ) * ( g * h ) = g * e g * ( g * h ) * ( g * h ) * h = g * e * h ( g * g ) * ( h * g ) * ( h * h ) = ( g * e ) * h e * ( h * g ) * e = g * h h * g = g * h sinc group oper commut , group abelian # # definit given group ( g , * ) , total number element g finit , group call finit group . order group ( g , * ) number element g ( finit group ) , cardin group g finit . order group g written | g | ( less frequent ) ( g ) . subset h g call subgroup group ( g , * ) h satisfi axiom group , use oper `` * '' , restrict subset h . thu h subgroup ( g , * ) , ( h , * ) also group , obey theorem , restrict h . order subgroup h number element h . proper subgroup group g subgroup ident g . non-trivi subgroup g ( usual ) proper subgroup g contain element e . theorem 2.1 : h subgroup ( g , * ) , ident e h h ident ident e ( g , * ) . h h , h * e h = h ; sinc h must also g , h * e = h ; theorem 1.4 , e h = e . theorem 2.2 : h subgroup g , h element h , invers h h ident invers h g . let h k element h , h * k = e ; sinc h must also g , h * h -1 = e ; theorem 1.5 , k = h -1 . given subset g , often want determin whether also subgroup g . one handi theorem cover case finit infinit group : theorem 2.3 : non-empti subset g , subgroup g , b , * b -1 . , b , * b -1 , e , sinc * -1 = e . , e * -1 = -1 , b , * b = * ( b -1 ) -1 thu , axiom closur , ident , invers satisfi , associ inherit ; subgroup . convers , subgroup g , obey axiom group . note , ident ident ident e g . a4 , b , b -1 a1 , * b -1 . intersect two subgroup subgroup . theorem 2.4 : intersect non-empti set subgroup group g subgroup . let { h } set subgroup g , let k = ∩ { h } . e member everi h theorem 2.1 ; k empti . h k element k , , h k h . previou theorem , h * k -1 h therefor , h * k -1 ∩ { h } . therefor h , k k , h * k -1 k . previou theorem , k =∩ { h } subgroup g ; fact k subgroup h . group ( g , * ) , defin x 0 = e . write x * x x ² ; gener , x * x * x * ... * x ( n time ) x n . similarli , write x - n ( x -1 ) n . theorem 2.5 : let element group ( g , * ) . set { n : n integ } subgroup g . subgroup type call cyclic subgroup ; subgroup power often written < > , say gener < > . exist posit integ n n = e , say element order n g n smallest n . sometim written `` ( ) = n `` . subset g , element g , write `` * `` refer subset g made element form * , element ; similarli , write `` * `` indic set element form * . write * subset g made element form * , element element . h subgroup g , left coset h set form * h , g . right coset subset form h * . use theorem coset , state without proof : theorem : h subgroup g , x element g , either x * h = * h , x * h * h empti intersect . theorem : h subgroup g , everi left ( right ) coset h g contain number element . theorem : h subgroup g , g disjoint union left ( right ) coset h . theorem : h subgroup g , number distinct left coset h number distinct right coset h . defin index subgroup h group g ( written `` [ g : h ] '' ) number distinct left coset h g . theorem , deduc import lagrang 's theorem relat order subgroup order group : lagrang 's theorem : h subgroup g , | g | = | h | * [ g : h ] . finit group , also allow u state : lagrang 's theorem : h subgroup finit group g , order h divid order g . theorem : order group g prime number , group cyclic .