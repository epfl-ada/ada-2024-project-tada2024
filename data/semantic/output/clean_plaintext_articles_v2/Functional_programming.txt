function program program paradigm conceiv comput evalu mathemat function avoid state mutabl data . function program emphas applic function , contrast imper program , emphas chang state execut sequenti command . broader concept function program simpli defin set common concern theme rather list distinct paradigm . often consid import higher-ord first-class function , closur , recurs . common featur function program languag continu , hindley-miln type infer system , non-strict evalu ( includ , limit , `` lazi '' ) , monad . function program languag , especi `` pure function '' one , larg emphas academia rather commerci softwar develop . howev , notabl function program languag use industri commerci applic includ erlang ( concurr applic ) , r ( statist ) , mathematica ( symbol math ) , j k ( financi analysi ) , domain-specif program languag like xslt . import influenc function program lambda calculu , apl program languag , lisp program languag , recent haskel program languag . # # histori lambda calculu , invent alonzo church 1930 , provid theoret framework describ function evalu . though mathemat abstract rather program languag , lambda calculu form basi almost function program languag today . combinatori logic equival theoret foundat , develop mose schönfinkel haskel curri . origin develop achiev larger goal : clearer approach foundat mathemat . combinatori logic , commonli perceiv abstract lambda calculu , preced lambda-calculu invent . first computer-bas function program languag inform process languag ( ipl ) , develop newel , shaw , simon rand corpor johnniac comput mid-1950 . earli functional-flavor program languag lisp ( mixed-cas `` lisp '' ) , develop john mccarthi mit ibm 700/7000 seri scientif comput late 1950 . lisp introduc mani featur found modern function program languag , though lisp technic multi-paradigm languag . scheme dylan later attempt simplifi improv lisp . kenneth e. iverson develop apl program languag earli 1960 , describ 1962 book `` program languag . '' apl primari influenc john backu 's fp program languag . earli 1990 , iverson roger hui creat successor apl , j program languag . mid 1990 , arthur whitney , previous work iverson , creat k program languag , use commerci financi industri . john backu present fp program languag 1977 ture award lectur program liber von neumann style ? function style algebra program . defin function program built hierarch way mean `` combin form '' allow `` algebra program '' ; modern languag , mean function program follow principl composition . backu 's paper popular research function program , though emphas function-level program rather lambda-calculu style come associ function program . 1970 ml program languag creat robin milner univers edinburgh , david turner develop languag miranda univers kent . ml eventu develop sever dialect , common object caml standard ml . haskel program languag releas late 1980 attempt gather togeth mani idea function program research . # # concept number concept paradigm specif function program , gener foreign imper program ( includ object orient program ) . howev , program languag often hybrid sever program paradigm programm use `` mostli imper '' languag may util concept . # # # higher-ord function function program us notion higher-ord function . function higher-ord take function argument , and/or return function result . ( deriv antideriv calculu mathemat exampl function map function anoth function . ) higher-ord function close relat first-class function , higher-ord function first-class function allow function argument result function . distinct two subtl : `` higher-ord '' describ mathemat concept function oper function , `` first-class '' comput scienc term describ program languag entiti restrict use ( thu first-class function appear anywher program first-class entiti like number , includ argument function return valu ) . higher-ord function enabl curri , techniqu function appli argument one time , applic return new ( higher-ord ) function accept next argument . # # # pure function pure function program side-effect . function program function program languag pure function . sinc pure function modifi state , data may chang parallel function call . pure function therefor thread-saf , allow languag use call-by-futur evalu . lack side-effect allow languag , haskel , use call-by-ne evalu . `` pure '' function program languag typic enforc referenti transpar , notion 'equal substitut equal ' : two express `` equal '' valu ( notion equal ) , one substitut larger express without affect result comput . exampl , = f ( x ) * f ( x ) ; compil factor f ( x ) pure , transform program z = f ( x ) ; = z * z ; elimin second evalu ( possibl costli ) call f ( x ) . optim call common subexpress elimin . howev , function side effect , function call elimin . consid follow program fragment : = random ( ) * random ( ) ; second call random elimin , return valu may differ first call . similarli , = printf ( `` x '' ) * printf ( `` x '' ) ; optim away ; even printf return valu time , fail make second call would result differ program output . compil imper program languag perform common subexpress elimin function call , track whether function pure . possibl advanc compil infer whether local function effect optim accordingli ; howev , pre-compil librari expos inform , prevent call extern function optim away . compil , gcc , add extra keyword programm explicitli mark pure function optim perform . # # # recurs iter ( loop ) function languag usual accomplish via recurs . recurs function invok , allow oper perform . recurs may requir maintain stack , tail recurs recogn optim compil code use implement iter imper languag . scheme program languag standard requir implement recogn optim tail recurs . common pattern recurs factor use higher order function , catamorph anamorph ( `` fold '' `` unfold '' ) obviou exampl . higher order function play role analog built-in control structur loop imper languag . # # # function program non-funct languag possibl employ function style program languag tradit consid function languag . non-funct languag borrow featur lambda function , higher-ord function , list comprehens function program languag . make easier adopt function style use languag . function construct higher-ord function lazi list obtain c++ via librari . c one use function pointer get effect higher-ord function , exampl one implement common function map use function pointer . widespread declar domain specif languag like sql lex/ yacc , turing-complet , use element function program , especi eschew mutabl valu . # # comparison function imper program function program differ imper program . signific differ stem fact function program avoid side effect , use imper program implement state i/o . pure function program disallow side effect complet . disallow side effect provid referenti transpar , make easier verifi , optim , parallel program , easier write autom tool perform task . higher order function rare use older imper program . tradit imper program might use loop travers list , function style would often use higher-ord function , map , take argument function list , appli function element list , return list result . # # # simul state tasks—for exampl , maintain bank account balance—that often seem natur implement state . pure function program perform task , i/o task accept user input print screen , differ way . pure function program languag haskel implement use monad , deriv categori theori mathemat . monad extrem power offer intuit way model state ( side effect io ) imper manner without lose puriti . exist monad easi use , mani find difficult understand defin new monad ( sometim need certain type librari ) . altern method hoar logic develop track side effect program . modern research languag use effect system make explicit presenc side effect . # # # effici issu function program languag automat memori manag garbag collect , contrast older imper languag like c pascal use explicit memori manag . function program languag perceiv less effici use cpu memori languag . howev , mani modern imper languag java , perl , python , rubi also perform automat memori manag . function program languag becom effici year . program perform intens numer comput , function languag ocaml clean similar speed c. program handl larg matrix multidimension databas , array function languag ( j k ) design speed optim mind . despit pure function languag reput slower , imper algorithm express languag logarithm slowdown worst case . moreov , immut data mani case lead greater execut effici owe compil make assumpt unsaf imper languag . # # # code style imper program tend emphas seri step taken program carri action , function program tend emphas composit arrang function , often without specifi explicit step . simpl exampl two solut program goal ( use multi-paradigm languag python ) illustr . # imper style target = [ ] # creat empti list item source_list : # iter thing sourc trans1 = g ( item ) # transform item g ( ) function trans2 = f ( trans1 ) # second transform f ( ) function target.append ( trans2 ) # add transform item target function version differ feel : # function style def compose2 ( f , g ) : # fp-orient languag often standard compos ( ) def c ( item ) : # creat utility-funct composit return f ( g ( item ) ) return c target = map ( compose2 ( f , g ) , source_list ) # compact exampl function paradigm python : target = map ( lambda x : f ( g ( x ) ) , source_list ) # us lambda form map # : target = [ f ( g ( item ) ) item source_list ] # list comprehens contrast imper style describ step involv build target , function style describ mathemat relationship source_list target .