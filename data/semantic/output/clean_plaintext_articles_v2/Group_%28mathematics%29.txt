abstract algebra , group set binari oper satisfi certain axiom , detail . exampl , set integ addit group . branch mathemat studi group call group theori . mani structur investig mathemat turn group . includ familiar number system , integ , ration number , real number , complex number addit , well non-zero ration , real , complex number , multipl . import exampl group non-singular matrix multipl group invert function composit . group theori allow properti structur investig gener set . group theori extens applic mathemat , scienc , engin . mani algebra structur field vector space may defin concis term group , group theori provid import tool studi symmetri , sinc symmetri object form group . group thu essenti abstract branch physic involv symmetri principl , rel , quantum mechan , particl physic . furthermor , abil repres geometr transform find applic chemistri , comput graphic , field . # # histori # # definit group ( g , * ) set g binari oper * satisfi follow four axiom : closur : , b g , result * b also g . associ : , b c g , ( * b ) * c = * ( b * c ) . ident element : exist element e g g , e * = * e = . invers element : g , exist element b g * b = b * = e , e ident element . text omit explicit requir closur , sinc closur group follow fact oper * binari oper . use ident element properti shown group exactli one ident element . see simpl theorem . invers element also shown uniqu , left- right-invers element . definit thu slightli narrow , substitut second third axiom concept `` left ( right ) ident element '' `` left ( right ) invers element . '' also note group ( g , * ) often denot simpli g ambigu oper . # # basic concept group theori # # # order group element order group g , denot | g | , number element set g . order finit , group infinit group , denot | g | = ∞ . order element group g least posit integ n n = e , n multipl n time ( suitabl composit depend group oper ) . n exist , order said infin . # # # subgroup set h subgroup group g subset g group use oper defin g . word , h subgroup ( g , * ) restrict * h group oper h . g finit group , h . , order h divid order g ( lagrang 's theorem ) . # # # abelian group group g said abelian group ( commut ) oper commut , , , b g , * b = b * . non-abelian group group abelian . term `` abelian '' name mathematician niel abel . # # # cyclic group cyclic group group whose element may gener success composit oper defin group appli singl element group . singl element call gener primit element group . multipl cyclic group g group , gener : addit cyclic group , gener : success composit oper defin group appli non-primit element group , cyclic subgroup gener . order cyclic subgroup divid order group . thu , order group prime , element , except ident , primit element group . import note group contain cyclic subgroup gener element group . howev , group construct cyclic subgroup necessarili cyclic group . exampl , klein group cyclic group even though construct two copi cyclic group order 2 . # # notat group group use differ notat depend context group oper . addit group use + denot addit , minu sign - denot invers . exampl , + ( - ) = 0 z . multipl group use * , , gener 'composit ' symbol denot multipl , superscript -1 denot invers . exampl , * -1 = 1 . common drop * write aa -1 instead . function group use • denot function composit , superscript -1 denot invers . exampl , g • g -1 = e . common drop • write gg -1 instead . omit symbol oper gener accept , leaf reader know context group oper . defin group , standard notat use parenthesi defin group oper . exampl , ( h , + ) denot set h group addit . group like ( z n , + ) ( f n * , * ) , common drop parenthesi oper , e.g . z n f n * . also correct refer group set identifi , e.g . h , defin group set-build notat . ident element e sometim known `` neutral element , '' sometim denot symbol , depend group : multipl group , ident element denot 1 . invert matrix group , ident element usual denot . addit group , ident element may denot 0 . function group , ident element usual denot f 0 . subset g x element g , , multipl notat , xs set product { x : } ; similarli notat sx = { sx : } ; two subset g , write st { st : , } . addit notat , write x + , + x , + respect set ( see coset ) . # # exampl group # # # abelian group : integ addit familiar group group integ addit . let z set integ , { ... , −4 , −3 , −2 , −1 , 0 , 1 , 2 , 3 , 4 , ... } , let symbol `` + '' indic oper addit . ( z , + ) group . proof : closur : b integ + b integ . associ : , b , c integ , ( + b ) + c = + ( b + c ) . ident element : 0 integ integ , 0 + = + 0 = . invers element : integ , integ − satisfi invers rule : + ( − ) = ( − ) + = 0 . group also abelian + b = b + . extend exampl consid integ addit multipl , form complic algebra structur call ring . ( , note integ multipl group ) # # # cyclic multipl group case cyclic multipl group g , element n group gener set integ exponenti primit element group : exampl 2 oper mathemat multipl oper , g = { .. ,2 − 2 ,2 − 1 ,2 0 ,2 1 ,2 2 ,2 3 , .. } = { .. ,0.25,0.5,1,2,4,8 , .. } . modulo may bind group finit set non-fract set element , sinc invers ( x − 2 , etc . ) would within set . # # # group : integ multipl hand , consid integ oper multipl , denot `` · '' , ( z , · ) group . satisfi axiom , fail invers : closur : b integ · b integ . associ : , b , c integ , ( · b ) · c = · ( b · c ) . ident element : 1 integ integ , 1 · = · 1 = . howev , true whenev integ , integ b ab = ba = 1 . exampl , = 2 integ , solut equat ab = 1 case b = 1/2 . choos b = 1/2 1/2 integ . ( invers element fail ) sinc everi element ( z , · ) invers , ( z , · ) group . , howev , commut monoid , similar structur group requir invers element . # # # abelian group : nonzero ration number multipl consid set ration number q , set fraction integ / b , b integ b nonzero , oper multipl , denot `` · '' . sinc ration number 0 multipl invers , ( q , · ) , like ( z , · ) , group . howev , instead use set nonzero ration number q \ { 0 } , ( q \ { 0 } , · ) form abelian group . closur , associ , ident element axiom easi check follow properti integ . invers element : invers / b b / satisfi axiom . n't lose closur remov zero , product two nonzero ration never zero . integ form ring , ration number form algebra structur field , allow oper addit , subtract , multipl divis . # # # finit nonabelian group : permut set exampl taken larger articl dihedr group order 6 concret exampl group , consid three color block ( red , green , blue ) , initi place order rgb . let action `` swap first block second block '' , let b action `` swap second block third block '' . multipl form , tradit write xy combin action `` first , x `` ; ab action rgb → rbg → brg , i.e. , `` take last block move front '' . write e `` leav block '' ( ident action ) , write six permut set three block follow action : e : rgb → rgb : rgb → grb b : rgb → rbg ab : rgb → brg ba : rgb → gbr aba : rgb → bgr note action aa effect rgb → grb → rgb , leav block ; write aa = e . similarli , bb = e , ( aba ) ( aba ) = e , ( ab ) ( ba ) = ( ba ) ( ab ) = e ; action invers . inspect , also determin associ closur ; note exampl ( ab ) = ( ba ) = aba , ( ba ) b = b ( ab ) = bab . group call symmetr group 3 letter , 3 . order 6 ( 3 factori ) , non-abelian ( sinc , exampl , ab ≠ ba ) . sinc 3 built basic action b , say set { , b } gener . gener , defin symmetr group permut n object . group denot n order n factori . one reason permut group import everi finit group express subgroup symmetr group n ; result cayley 's theorem . # # simpl theorem group exactli one ident element . proof : suppos e f ident element . , definit ident , fe = ef = e also ef = fe = f . e = f . therefor ident element uniqu . everi element exactli one invers . proof : suppos b c invers x . , definit invers , xb = bx = e xc = cx = e . : therefor invers uniqu . first two properti actual follow associ binari oper defin set . given binari oper set , one ident one invers element . perform divis group ; , given element b group g , exactli one solut x g equat x * = b exactli one solut g equat * = b . express `` 1 * 2 * ··· * n `` unambigu , result matter place parenthesi . ( sock shoe ) invers product product invers opposit order : ( * b ) −1 = b −1 * −1 . proof : demonstr ( ab ) ( b -1 -1 ) = ( b -1 -1 ) ( ab ) = e , requir definit invers . similarli direct . basic fact hold individu group form field elementari group theori . # # construct new group given one possibl way construct new group set given group : subgroup : subgroup h group g group . quotient group : given group g normal subgroup n , quotient group set coset g/n togeth oper ( gn ) ( hn ) = ghn . direct product : ( g , * ) ( h , • ) group , set g × h togeth oper ( g 1 , h 1 ) ( g 2 , h 2 ) = ( g 1 * g 2 , h 1 • h 2 ) . direct product also defin number term , finit infinit , use cartesian product defin oper coordinate-wis . semidirect product : n h group φ : h → aut ( n ) group homomorph , semidirect product n h respect φ group ( n × h , * ) , * defin ( n 1 , h 1 ) * ( n 2 , h 2 ) = ( n 1 φ ( h 1 ) ( n 2 ) , h 1 h 2 ) direct extern sum : direct extern sum famili group subgroup product constitut element finit number non-ident coordin . famili finit direct sum product equival . # # prove set group two main method prove set group : prove set subgroup group ; prove set group use definit . first method gener refer `` subgroup test '' requir prove follow tri prove h subgroup : set h non-empti subset g ( i.e . ident element insid ) h close oper g. ( ab h -1 h , b h ) second method requir prove axiom assumpt definit set g : g non-empti ; g close binari oper ; g associ ; e g ( usual follow non-empti ) ; g consist unit . finit group , one need prove subset non-empti close ambient group 's oper . # # gener abstract algebra , get relat structur similar group relax axiom given top articl . elimin requir everi element invers , get monoid . addit requir ident either , get semigroup . altern , relax requir oper associ still requir possibl divis , get loop . addit requir ident , get quasigroup . n't requir axiom binari oper , get magma . groupoid , similar group except composit * b need defin b , aris studi involv kind symmetri , often topolog analyt structur . special sort categori . supergroup hopf algebra gener . lie group , algebra group topolog group exampl group object : group-lik structur sit categori ordinari categori set . abelian group form prototyp concept abelian categori , applic vector space beyond . formal group law certain formal power seri properti much like group oper .