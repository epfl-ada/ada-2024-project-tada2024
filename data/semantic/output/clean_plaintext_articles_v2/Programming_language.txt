program languag artifici languag use control behaviour machin , particularli comput . program languag , like human languag , defin use syntact semant rule , determin structur mean respect . program languag use facilit commun task organ manipul inform , express algorithm precis . author restrict term `` program languag '' languag express possibl algorithm ; sometim term `` comput languag '' use limit artifici languag . thousand differ program languag creat , new one creat everi year . # # definit author disagre precis definit , trait often consid import requir object languag character program languag : function : program languag languag use write comput program , instruct comput perform kind comput , and/or organ flow control extern devic ( printer , robot , peripher ) . target : program languag differ natur languag natur languag use interact peopl , program languag also allow human commun instruct machin . case , program languag use one program machin program anoth ; postscript sourc code , exampl , frequent gener programmat control comput printer display . construct : program languag may contain construct defin manipul data structur control flow execut . express power : theori comput classifi languag comput express ( see chomski hierarchi ) . ture complet languag implement set algorithm . ansi/iso sql chariti exampl languag ture complet yet often call program languag . non-comput languag , markup languag like html formal grammar like bnf , usual consid program languag . usual approach emb program languag non-comput ( host ) languag , express templat host languag . # # purpos promin purpos program languag provid instruct comput . , program languag differ form human express requir greater degre precis complet . use natur languag commun peopl , human author speaker ambigu make small error , still expect intent understood . howev , comput exactli told , understand code programm `` intend '' write . combin languag definit , program , program 's input must fulli specifi extern behaviour occur program execut . mani languag design scratch , alter meet new need , combin languag , eventu fallen disus . although attempt design one `` univers '' comput languag serf purpos , fail accept role . need divers comput languag aris divers context languag use : program rang tini script written individu hobbyist huge system written hundr programm . programm rang expertis novic need simplic els , expert may comfort consider complex . program must balanc speed , size , simplic system rang microcontrol supercomput . program may written chang gener , may undergo nearli constant modif . final , programm may simpli differ tast : may accustom discuss problem express particular languag . one common trend develop program languag add abil solv problem use higher level abstract . earliest program languag tie close underli hardwar comput . new program languag develop , featur ad let programm express idea remov simpl translat underli hardwar instruct . programm less tie need comput , program comput less effort programm . let write program amount time . natur languag processor propos way elimin need special languag program . howev , goal remain distant benefit open debat . edsger dijkstra took posit use formal languag essenti prevent introduct meaningless construct , dismiss natur languag program `` foolish . '' alan perli similarli dismiss idea . # # element # # # syntax program languag 's surfac form known syntax . program languag pure textual ; use sequenc text includ word , number , punctuat , much like written natur languag . hand , program languag graphic natur , use spatial relationship symbol specifi program . syntax languag describ possibl combin symbol form syntact correct program . mean given combin symbol handl semant . sinc languag textual , articl discuss textual syntax . program languag syntax usual defin use combin regular express ( lexic structur ) backus-naur form ( grammat structur ) . simpl grammar , base lisp : express : := atom | list atom : := number | symbol number : := [ +- ] ? [ ' 0'- ' 9 ' ] + symbol : := [ ' a'- ' z '' a'- ' z ' ] . * list : := ' ( ' express * ' ) ' grammar specifi follow : express either atom list ; atom either number symbol ; number unbroken sequenc one decim digit , option preced plu minu sign ; symbol letter follow zero charact ( exclud whitespac ) ; list match pair parenthesi , zero express insid . follow exampl well-form token sequenc grammar : ' 12345 ' , ' ( ) ' , ' ( b c232 ( 1 ) ) ' syntact correct program semant correct . mani syntact correct program nonetheless ill-form , per languag 's rule ; may ( depend languag specif sound implement ) result error translat execut . case , program may exhibit undefin behaviour . even program well-defin within languag , may still mean intend person wrote . use natur languag exampl , may possibl assign mean grammat correct sentenc sentenc may fals : '' colorless green idea sleep furious . '' grammat well-form gener accept mean . `` john marri bachelor . '' grammat well-form express mean true . follow c languag fragment syntact correct , perform oper semant defin ( p null pointer , oper p- > real p- > im mean ) : complex * p = null ; complex abs_p = sqrt ( p- > real * p- > real + p- > im * p- > im ) ; # # # type system type system defin program languag classifi valu express type , manipul type interact . gener includ descript data structur construct languag . design studi type system use formal mathemat known type theori . intern , data modern digit comput store simpli zero one ( binari ) . data typic repres inform real world name , bank account measur , low-level binari data organ program languag high-level concept data type . also abstract type whose purpos warn programm semant meaningless statement verifi safeti properti program . languag classifi respect type system . # # # # type v untyp languag languag type oper defin one data type perform valu anoth data type . exampl , `` text quot `` string . program languag , divid number string mean . modern program languag therefor reject program attempt perform oper . languag , meaningless oper detect program compil ( `` static '' type check ) , reject compil , other , detect program run ( `` dynam '' type check ) , result runtim except . opposit , untyp languag , assembl languag , allow oper perform data type . high-level languag untyp includ bcpl varieti forth . practic , languag consid type point view type theori ( verifi reject oper ) , modern languag offer degre type . mani product languag provid mean bypass subvert type system . # # # # static v dynam type static type express type determin prior program run ( typic compile-tim ) . exampl , 1 ( 2+2 ) integ express ; pass function expect string , store variabl defin hold date . statically-typ languag manifestli type type-inf . first case , programm must explicitli write type certain textual posit ( exampl , variabl declar ) . second case , compil infer type express declar base context . mainstream statically-typ languag , c++ java , manifestli type . complet type infer tradit associ less mainstream languag , haskel ml . howev , mani manifestli type languag support partial type infer ; exampl , java c # infer type certain limit case . dynam type , also call latent type , determin type-safeti oper runtim ; word , type associ runtim valu rather textual express . type-inf languag , dynam type languag requir programm write explicit type annot express . among thing , may permit singl variabl refer valu differ type differ point program execut . howev , type error automat detect piec code actual execut , make debug difficult . lisp , javascript , python dynam type . # # # # weak strong weak type allow valu one type treat anoth , exampl treat string number . occasion use , also caus bug ; languag often term unsaf . c , c++ , assembl languag often describ weakli type . strong type prevent . attempt mix type rais error . strongly-typ languag often term type-saf safe , make bug imposs . ada , python , ml strongli type . altern definit `` weakli type '' refer languag , perl , javascript , c++ permit larg number implicit type convers ; perl particular character dynam type program languag type check take place runtim . see type system . capabl often use , occasion danger ; would permit oper whose object chang type demand . strong static gener consid orthogon concept , usag literatur differ . use term strongli type mean strongli , static type , , even confusingli , mean simpli static type . thu c call strongli type weakli , static type .. # # # execut semant data specifi , machin must instruct perform oper data . execut semant languag defin variou construct languag produc program behaviour . exampl , semant may defin strategi express evalu valu , manner control structur condit execut statement . # # # core librari program languag associ core librari ( sometim known 'standard librari ' , especi includ part publish languag standard ) , convent made avail implement languag . core librari typic includ definit commonli use algorithm , data structur , mechan input output . languag 's core librari often treat part languag user , although design may treat separ entiti . mani languag specif defin core must made avail implement , case standard languag core librari may requir . line languag core librari therefor differ languag languag . inde , languag design mean certain syntact construct even describ without refer core librari . exampl , java , string liter defin instanc java.lang.str class ; similarli , smalltalk , anonym function express ( `` block '' ) construct instanc librari 's blockcontext class . convers , scheme contain multipl coher subset suffic construct rest languag librari macro , languag design even bother say portion languag must implement languag construct , must implement part librari . # # practic languag 's design user must construct number artifact govern enabl practic program . import artifact languag specif implement . # # # specif specif program languag intend provid definit languag user implementor use interpret behaviour program read sourc code . program languag specif take sever form , includ follow : explicit definit syntax semant languag . syntax commonli specifi use formal grammar , semant definit may written natur languag ( e.g. , c languag ) , formal semant ( e.g. , standard ml scheme specif ) . descript behaviour translat languag ( e.g. , c++ fortran ) . syntax semant languag infer descript , may written natur formal languag . model implement , sometim written languag specifi ( e.g. , prolog ) . syntax semant languag explicit behaviour model implement . # # # implement implement program languag provid way execut program one configur hardwar softwar . , broadli , two approach program languag implement : compil interpret . gener possibl implement languag use techniqu . output compil may execut hardwar program call interpret . implement make use interpret approach distinct boundari compil interpret . instanc , implement basic program languag compil execut sourc line time . program execut directli hardwar usual run sever order magnitud faster interpret softwar . one techniqu improv perform interpret program just-in-tim compil . virtual machin monitor sequenc bytecod frequent execut translat machin code direct execut hardwar . # # histori # # # earli develop first program languag predat modern comput . 19th centuri `` programm '' loom player piano scroll implement , today recogn exampl , domain-specif program languag . begin twentieth centuri , punch card encod data direct mechan process . 1930 1940 , formal alonzo church 's lambda calculu alan ture 's ture machin provid mathemat abstract express algorithm ; lambda calculu remain influenti languag design . 1940 , first electr power digit comput creat . comput earli 1950 , notabl univac ibm 701 use machin languag program . first gener machin languag program quickli superced second gener program languag known assembl languag . later 1950 , assembl languag program , evolv includ use macro instruct , follow develop three modern program languag : fortran , lisp , cobol . updat version still gener use , importantli , strongli influenc develop later languag . end 1950 , languag formal algol 60 introduc , modern program languag , mani respect , descend algol . format use earli program languag heavili influenc constraint interfac . # # # refin period 1960 late 1970 brought develop major languag paradigm use , though mani aspect refin idea first third-gener program languag : apl introduc array program , influenc function program . 1960 , simula first languag design support object-ori program ; mid-1970 , smalltalk follow first `` pure '' object-ori languag . c develop 1969 1973 system program languag , remain popular . prolog , design 1972 , first logic program languag . 1978 , ml built polymorph type system top lisp , pioneer static type function program languag . languag spawn entir famili descend , modern languag count least one ancestri . 1960 1970 also saw consider debat merit structur program , whether program languag design support . edsger dijkstra , famou 1968 letter publish commun acm , argu goto statement elimin `` higher level '' program languag . 1960 1970 also saw expans techniqu reduc footprint program well improv product programm user . card deck earli 4gl lot smaller function express 3gl deck . # # # consolid growth 1980 year rel consolid . c++ combin object-ori system program . unit state govern standard ada , system program languag intend use defens contractor . japan elsewher , vast sum spent investig so-cal `` fifth gener '' languag incorpor logic program construct . function languag commun move standard ml lisp . rather invent new paradigm , movement elabor upon idea invent previou decad . one import trend languag design 1980 increas focu program large-scal system use modul , large-scal organiz unit code . modula-2 , ada , ml develop notabl modul system 1980 . modul system often wed gener program construct . rapid growth internet mid-1990 's creat opportun new languag . perl , origin unix script tool first releas 1987 , becam common dynam web site . java came use server-sid program . develop fundament novel , rather refin exist languag paradigm , larg base c famili program languag . program languag evolut continu , industri research . current direct includ secur reliabl verif , new kind modular ( mixin , deleg , aspect ) , databas integr . 4gl exampl languag domain-specif , sql , manipul return set data rather scalar valu canon program languag . perl , exampl , ' document ' hold multipl 4gl program , well multipl javascript program , part perl code use variabl interpol 'here document ' support multi-languag program . # # taxonomi overarch classif scheme program languag . given program languag usual singl ancestor languag . languag commonli aris combin element sever predecessor languag new idea circul time . idea origin one languag diffus throughout famili relat languag , leap suddenli across famili gap appear entir differ famili . task complic fact languag classifi along multipl ax . exampl , java object-ori languag ( encourag object-ori organ ) concurr languag ( contain built-in construct run multipl thread parallel ) . python object-ori script languag . broad stroke , program languag divid program paradigm classif intend domain use . paradigm includ procedur program , object-ori program , function program , logic program ; languag hybrid paradigm multi-paradigmat . assembl languag much paradigm direct model underli machin architectur . purpos , program languag might consid gener purpos , system program languag , script languag , domain-specif languag , concurrent/distribut languag ( combin ) . gener purpos languag design larg educ goal . program languag classifi posit chomski hierarchi . exampl , thue program languag recogn defin type-0 languag chomski hierarchi . program languag type-2 languag obey context-fre grammar .