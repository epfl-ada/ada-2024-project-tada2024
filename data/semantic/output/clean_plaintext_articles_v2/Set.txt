mathemat , set thought collect distinct object consid whole . although appear simpl idea , set one import fundament concept modern mathemat . studi structur possibl set , set theori , rich ongo . invent end 19th centuri , set theori ubiquit part mathemat educ , introduc primari school mani countri . set theori view foundat upon nearli mathemat deriv . # # naiv set theori begin work beiträg zur begründung der transfiniten mengenlehr , georg cantor , princip creator set theori , made follow definit set : object set also call member . element set anyth : number , peopl , letter alphabet , set , . set convent denot capit letter , instanc , b c . two set b said equal everi member also member b crucial , everi member b also member ; written = b . set , unlik multiset , contain two ident element . set oper preserv properti element set uniqu . similarli , order element set list irrelev , unlik sequenc tupl . # # axiomat set theori although initi naiv set theori , defin set mere well-defin collect , well accept , soon ran sever obstacl . found definit spawn sever paradox , notabl : russel 's paradox - show `` set set contain , '' i.e . `` set '' well-defin . cantor 's paradox - show `` set set '' exist . reason phrase well-defin well-defin . import free set theori paradox sinc entir mathemat redefin term set theori . attempt avoid paradox , set theori axiomat base first-ord logic , thu axiomat set theori born . purpos howev , naiv set theori still use . # # applic set theori seen foundat virtual mathemat deriv . exampl , structur abstract algebra , group , field ring , set close one oper . # # descript set set precis descript ; may arbitrari collect , express inclus criterion . set may describ word : set whose member first four posit whole number . b set whose member color french flag . convent , set defin explicitli list element brace ( sometim call curli bracket curli brace ) : c = { 4 , 2 , 1 , 3 } = { red , white , blue } two differ descript may defin set . use exampl , c ident , sinc precis member . shorthand = c use express equal . set describ set builder notat depend order element list , whether repetit list . exampl , { 6 , 11 } = { 11 , 6 } = { 11 , 11 , 6 , 11 } . notat { ... } mere indic set describ includ element list ; element list , two element transpos , effect result set . set mani element , abbrevi list sometim use . first one thousand posit whole number describ use symbol shorthand : { 1 , 2 , 3 , ... , 1000 } , ellipsi ( ... ) indic list continu way . ellips may also use set extend infin ; set posit even number describ : { 2 , 4 , 6 , 8 , ... } . set , particularli complex one , use differ notat . set f , whose member first twenti number four less squar integ , describ : f = { n 2 – 4 : n integ ; 0 ≤ n ≤ 19 } descript , colon ( : ) mean , descript interpret `` f set number form n 2 – 4 , n whole number rang 0 19 inclus . '' sometim pipe notat | use instead colon . # # membership someth element particular set symbolis respect . , respect set defin : ( sinc 285 = 17² − 4 ) ; . # # cardin set describ definit number member ; exampl , set four member , set b three member , denot | |=4 | b |=3 respect . set zero member . set call empti set ( null set ) denot symbol ø . let set three-sid squar , zero member , thu = ø . like number zero , though seemingli trivial , empti set turn quit import mathemat . set infinit number member ; exampl , set natur number infinit . infinit set larger cardin other ; real number natur number ( sens cardin ) . # # subset everi member set also member set b , said subset b , written ( also pronounc contain b ) . equival , write , read b superset , b includ , b contain . relationship set establish call inclus contain . subset , equal , b , call proper subset b , written ( proper subset b ) ( b proper superset ) . howev , literatur symbol read , explicit symbol often use proper subset superset . subset b exampl : set men proper subset set peopl . empti set subset everi set everi set subset : # # # power set power set set defin set subset . includ subset form member empti set . finit set cardin n power set cardin 2 n . infinit ( either countabl uncount ) set power set alway uncount . power set written 2 . # # special set set hold great mathemat import refer regular acquir special name notat convent identifi . one empti set . mani set repres use blackboard bold typefac . special set number includ : , denot set prime . , denot set natur number . say , = { 1 , 2 , 3 , ... } , sometim = { 0 , 1 , 2 , 3 , ... } . , denot set integ ( whether posit , neg zero ) . = { ... , -2 , -1 , 0 , 1 , 2 , ... } . , denot set ration number ( , set proper improp fraction ) . , . exampl , . integ set sinc everi integ express fraction . , denot set real number . set includ ration number , togeth irrat number ( , number rewritten fraction , π , e , √2 ) . , denot set complex number . set number infinit number element , . prime use less frequent other outsid number theori relat field . # # basic oper # # # union way construct new set exist one . two set `` ad '' togeth . union b , denot u b , set thing member either b . union b exampl : { 1 , 2 } u { red , white } = { 1 , 2 , red , white } { 1 , 2 , green } u { red , white , green } = { 1 , 2 , red , white , green } { 1 , 2 } u { 1 , 2 } = { 1 , 2 } basic properti union : u b = b u ⊆ u b u = u ø = # # # intersect new set also construct determin member two set `` common '' . intersect b , denot ∩ b , set thing member b . ∩ b = ø , b said disjoint . intersect b exampl : { 1 , 2 } ∩ { red , white } = ø { 1 , 2 , green } ∩ { red , white , green } = { green } { 1 , 2 } ∩ { 1 , 2 } = { 1 , 2 } basic properti intersect : ∩ b = b ∩ ∩ b ⊆ ∩ = ∩ ø = ø # # # complement two set also `` subtract '' . rel complement b ( also call set theoret differ b ) , denot b − , ( b \ ) set element member b , member . note valid `` subtract '' member set set , remov green { 1,2,3 } ; effect . certain set set discuss consid subset given univers set u . case , u − , call absolut complement simpli complement , denot ′ . rel complement b complement u exampl : { 1 , 2 } − { red , white } = { 1 , 2 } { 1 , 2 , green } − { red , white , green } = { 1 , 2 } { 1 , 2 } − { 1 , 2 } = ø u set integ , e set even integ , set odd integ , complement e u , equival , e ′ = . basic properti complement : u a′ = u ∩ a′ = ø ( a′ ) ′ = − = ø − b = ∩ b′